services:
  # ===============================
  # IN    restart: unless-stoppedUCTURE SERVICES
  # ===============================
  
  zookeeper:
    image: nexus.elocloud.ninja/confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: inventory-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - inventory-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: nexus.elocloud.ninja/confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: inventory-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - inventory-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "29092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: nexus.elocloud.ninja/redis:7.2-alpine
    container_name: inventory-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass inventorypass123
    volumes:
      - redis_data:/data
    networks:
      - inventory-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "inventorypass123", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: nexus.elocloud.ninja/postgres:15-alpine
    container_name: inventory-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - inventory-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===============================
  # MONITORING SERVICES
  # ===============================

  prometheus:
    image: nexus.elocloud.ninja/prom/prometheus:v2.47.0
    container_name: inventory-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - inventory-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: nexus.elocloud.ninja/grafana/grafana:10.1.0
    container_name: inventory-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: grafana123
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_SECURITY_ALLOW_EMBEDDING: 'true'
      GF_AUTH_ANONYMOUS_ENABLED: 'false'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - inventory-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===============================
  # APPLICATION SERVICES
  # ===============================

  store-service:
    build:
      context: ./store-service
      dockerfile: Dockerfile
    container_name: inventory-store-service
    depends_on:
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      # Application
      STORE_ID: STORE-001
      SPRING_PROFILES_ACTIVE: local
      SERVER_PORT: 8081
      
      # Kafka (para produção, mas com config local)
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      
      # Redis (para produção, mas com config local)
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: inventorypass123
    volumes:
      - store_logs:/app/logs
    networks:
      - inventory-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  central-inventory-service:
    build:
      context: ./central-inventory-service
      dockerfile: Dockerfile
    container_name: inventory-central-inventory-service
    hostname: central-inventory-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=local
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=central-inventory-group
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_REDIS_PASSWORD=inventorypass123
      - SPRING_REDIS_DATABASE=0
      - JAVA_OPTS=-Xmx1024m -Xms512m
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - inventory-network
    volumes:
      - central_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

# ===============================
# NETWORKS
# ===============================

networks:
  inventory-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# ===============================
# VOLUMES
# ===============================

volumes:
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  store_logs:
    driver: local
  central_logs:
    driver: local
