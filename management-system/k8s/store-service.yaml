apiVersion: v1
kind: ConfigMap
metadata:
  name: store-service-config
  namespace: inventory-system
data:
  DATABASE_URL: "jdbc:postgresql://postgres-service:5432/inventorydb"
  DATABASE_USERNAME: "inventory"
  KAFKA_BOOTSTRAP_SERVERS: "kafka-service:29092"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  STORE_ID: "STORE-001"
  SPRING_PROFILES_ACTIVE: "production"
  ZIPKIN_ENDPOINT: "http://zipkin-service:9411/api/v2/spans"

---
apiVersion: v1
kind: Secret
metadata:
  name: store-service-secrets
  namespace: inventory-system
type: Opaque
data:
  DATABASE_PASSWORD: aW52ZW50b3J5MTIz  # inventory123 base64
  REDIS_PASSWORD: aW52ZW50b3J5cGFzczEyMw==  # inventorypass123 base64

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: store-service
  namespace: inventory-system
  labels:
    app: store-service
    component: inventory
    tier: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: store-service
  template:
    metadata:
      labels:
        app: store-service
        component: inventory
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/store-service/actuator/prometheus"
    spec:
      containers:
      - name: store-service
        image: inventory/store-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8081
          protocol: TCP
        env:
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: store-service-config
              key: DATABASE_URL
        - name: DATABASE_USERNAME
          valueFrom:
            configMapKeyRef:
              name: store-service-config
              key: DATABASE_USERNAME
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: store-service-secrets
              key: DATABASE_PASSWORD
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: store-service-config
              key: KAFKA_BOOTSTRAP_SERVERS
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: store-service-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: store-service-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: store-service-secrets
              key: REDIS_PASSWORD
        - name: STORE_ID
          valueFrom:
            configMapKeyRef:
              name: store-service-config
              key: STORE_ID
        - name: SPRING_PROFILES_ACTIVE
          valueFrom:
            configMapKeyRef:
              name: store-service-config
              key: SPRING_PROFILES_ACTIVE
        - name: ZIPKIN_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: store-service-config
              key: ZIPKIN_ENDPOINT
        - name: JAVA_OPTS
          value: "-Xmx1024m -Xms512m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /store-service/actuator/health/liveness
            port: 8081
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /store-service/actuator/health/readiness
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /store-service/actuator/health
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 10
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
      volumes:
      - name: app-logs
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: store-service
  namespace: inventory-system
  labels:
    app: store-service
    component: inventory
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8081
    targetPort: 8081
    protocol: TCP
  selector:
    app: store-service

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: store-service-ingress
  namespace: inventory-system
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  ingressClassName: nginx
  rules:
  - host: inventory.local
    http:
      paths:
      - path: /store-service(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: store-service
            port:
              number: 8081
