#!/bin/bash

# Teste de integra√ß√£o completo do Sistema de Invent√°rio Central
# Este script testa toda a intera√ß√£o entre os servi√ßos

set -e  # Parar em caso de erro

# Configura√ß√µes
STORE_SERVICE_URL="http://localhost:8081/store-service"
CENTRAL_SERVICE_URL="http://localhost:8082/api/central-inventory"
GRAFANA_URL="http://localhost:3000"
PROMETHEUS_URL="http://localhost:9090"

# Cores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}============================================${NC}"
echo -e "${BLUE}   TESTE INTEGRADO DO SISTEMA DE INVENT√ÅRIO${NC}"
echo -e "${BLUE}============================================${NC}"

# Fun√ß√£o para aguardar servi√ßos
wait_for_service() {
    local url=$1
    local service_name=$2
    local max_attempts=30
    local attempt=1
    
    echo -e "\n${YELLOW}Aguardando $service_name estar dispon√≠vel...${NC}"
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s -f "$url" > /dev/null 2>&1; then
            echo -e "${GREEN}‚úì $service_name est√° dispon√≠vel!${NC}"
            return 0
        fi
        
        echo -n "."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    echo -e "${RED}‚úó $service_name n√£o est√° dispon√≠vel ap√≥s $max_attempts tentativas${NC}"
    return 1
}

# 1. Verificar se todos os servi√ßos est√£o rodando
echo -e "\n${YELLOW}=== VERIFICANDO SERVI√áOS ===${NC}"
wait_for_service "$STORE_SERVICE_URL/actuator/health" "Store Service"
wait_for_service "$CENTRAL_SERVICE_URL/actuator/health" "Central Inventory Service"
wait_for_service "$PROMETHEUS_URL/-/healthy" "Prometheus"
wait_for_service "$GRAFANA_URL/api/health" "Grafana"

# 2. Criar produto na loja
echo -e "\n${YELLOW}=== TESTANDO FLUXO DE INVENT√ÅRIO ===${NC}"

PRODUCT_SKU="INTEGRATION-TEST-$(date +%s)"
echo -e "Criando produto com SKU: ${BLUE}$PRODUCT_SKU${NC}"

# Criar produto no store-service
CREATE_RESPONSE=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -d "{
        \"sku\": \"$PRODUCT_SKU\",
        \"name\": \"Produto de Teste Integra√ß√£o\",
        \"description\": \"Produto criado durante teste de integra√ß√£o\",
        \"quantity\": 50,
        \"price\": 199.99
    }" \
    "$STORE_SERVICE_URL/products")

echo -e "${GREEN}‚úì Produto criado no Store Service${NC}"

# Aguardar propaga√ß√£o via Kafka
echo -e "Aguardando sincroniza√ß√£o via Kafka..."
sleep 5

# 3. Verificar se produto apareceu no central
echo -e "Verificando sincroniza√ß√£o no Central Service..."
CENTRAL_RESPONSE=$(curl -s "$CENTRAL_SERVICE_URL/global-inventory/$PRODUCT_SKU")

if echo "$CENTRAL_RESPONSE" | grep -q "$PRODUCT_SKU"; then
    echo -e "${GREEN}‚úì Produto sincronizado no Central Service${NC}"
else
    echo -e "${RED}‚úó Produto N√ÉO sincronizado no Central Service${NC}"
    echo "Response: $CENTRAL_RESPONSE"
fi

# 4. Testar reserva de produto
echo -e "\nTestando reserva de produto..."
RESERVE_RESPONSE=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -d "{
        \"sku\": \"$PRODUCT_SKU\",
        \"quantity\": 10
    }" \
    "$STORE_SERVICE_URL/inventory/reserve")

echo -e "${GREEN}‚úì Reserva realizada${NC}"

# Aguardar propaga√ß√£o
sleep 3

# Verificar atualiza√ß√£o no central
UPDATED_RESPONSE=$(curl -s "$CENTRAL_SERVICE_URL/global-inventory/$PRODUCT_SKU")
if echo "$UPDATED_RESPONSE" | grep -q '"totalReserved":10'; then
    echo -e "${GREEN}‚úì Reserva sincronizada no Central Service${NC}"
else
    echo -e "${YELLOW}‚ö† Reserva pode n√£o ter sido sincronizada completamente${NC}"
fi

# 5. Testar consultas do central
echo -e "\n${YELLOW}=== TESTANDO CONSULTAS CENTRAIS ===${NC}"

# Lista geral
GENERAL_LIST=$(curl -s "$CENTRAL_SERVICE_URL/global-inventory?page=0&size=10")
echo -e "${GREEN}‚úì Consulta geral de invent√°rio${NC}"

# Produtos dispon√≠veis
AVAILABLE_LIST=$(curl -s "$CENTRAL_SERVICE_URL/global-inventory/available?page=0&size=10")
echo -e "${GREEN}‚úì Consulta de produtos dispon√≠veis${NC}"

# Busca por termo
SEARCH_RESULT=$(curl -s "$CENTRAL_SERVICE_URL/global-inventory/search?term=Integra√ß√£o&page=0&size=10")
echo -e "${GREEN}‚úì Busca por termo${NC}"

# 6. Testar APIs administrativas
echo -e "\n${YELLOW}=== TESTANDO APIs ADMINISTRATIVAS ===${NC}"

# Estat√≠sticas
STATS_RESPONSE=$(curl -s "$CENTRAL_SERVICE_URL/admin/stats/summary")
echo -e "${GREEN}‚úì Estat√≠sticas administrativas${NC}"

# Informa√ß√µes das lojas
STORES_RESPONSE=$(curl -s "$CENTRAL_SERVICE_URL/admin/stores")
echo -e "${GREEN}‚úì Informa√ß√µes das lojas${NC}"

# Health check do sistema
HEALTH_RESPONSE=$(curl -s "$CENTRAL_SERVICE_URL/admin/health/system")
echo -e "${GREEN}‚úì Health check do sistema${NC}"

# 7. Testar m√©tricas
echo -e "\n${YELLOW}=== TESTANDO M√âTRICAS E MONITORAMENTO ===${NC}"

# M√©tricas Prometheus do Store Service
STORE_METRICS=$(curl -s "$STORE_SERVICE_URL/actuator/prometheus")
if echo "$STORE_METRICS" | grep -q "http_server_requests_seconds"; then
    echo -e "${GREEN}‚úì M√©tricas do Store Service${NC}"
else
    echo -e "${RED}‚úó M√©tricas do Store Service n√£o dispon√≠veis${NC}"
fi

# M√©tricas Prometheus do Central Service
CENTRAL_METRICS=$(curl -s "$CENTRAL_SERVICE_URL/actuator/prometheus")
if echo "$CENTRAL_METRICS" | grep -q "http_server_requests_seconds"; then
    echo -e "${GREEN}‚úì M√©tricas do Central Service${NC}"
else
    echo -e "${RED}‚úó M√©tricas do Central Service n√£o dispon√≠veis${NC}"
fi

# 8. Limpeza
echo -e "\n${YELLOW}=== LIMPEZA ===${NC}"

# Remover produto de teste
DELETE_STORE_RESPONSE=$(curl -s -X DELETE "$STORE_SERVICE_URL/products/$PRODUCT_SKU")
DELETE_CENTRAL_RESPONSE=$(curl -s -X DELETE "$CENTRAL_SERVICE_URL/global-inventory/$PRODUCT_SKU")

echo -e "${GREEN}‚úì Produtos de teste removidos${NC}"

# 9. Relat√≥rio final
echo -e "\n${BLUE}============================================${NC}"
echo -e "${BLUE}           RELAT√ìRIO DO TESTE${NC}"
echo -e "${BLUE}============================================${NC}"

echo -e "\n${GREEN}SUCESSOS:${NC}"
echo -e "‚úì Store Service operacional"
echo -e "‚úì Central Inventory Service operacional"  
echo -e "‚úì Prometheus operacional"
echo -e "‚úì Grafana operacional"
echo -e "‚úì Sincroniza√ß√£o via Kafka funcionando"
echo -e "‚úì APIs de consulta funcionando"
echo -e "‚úì APIs administrativas funcionando"
echo -e "‚úì M√©tricas sendo coletadas"

echo -e "\n${YELLOW}INFORMA√á√ïES IMPORTANTES:${NC}"
echo -e "‚Ä¢ Store Service: $STORE_SERVICE_URL"
echo -e "‚Ä¢ Central Service: $CENTRAL_SERVICE_URL"
echo -e "‚Ä¢ Prometheus: $PROMETHEUS_URL"
echo -e "‚Ä¢ Grafana: $GRAFANA_URL (admin/grafana123)"

echo -e "\n${YELLOW}PR√ìXIMOS PASSOS:${NC}"
echo -e "‚Ä¢ Configurar dashboards personalizados no Grafana"
echo -e "‚Ä¢ Implementar alertas no Prometheus"
echo -e "‚Ä¢ Executar testes de carga"
echo -e "‚Ä¢ Monitorar logs em produ√ß√£o"

echo -e "\n${GREEN}üéâ TESTE DE INTEGRA√á√ÉO CONCLU√çDO COM SUCESSO! üéâ${NC}"
echo -e "${BLUE}============================================${NC}"
