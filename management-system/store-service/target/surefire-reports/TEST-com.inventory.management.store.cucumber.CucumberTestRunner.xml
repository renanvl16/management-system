<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.inventory.management.store.cucumber.CucumberTestRunner" time="11.494" tests="24" errors="0" skipped="0" failures="9">
  <properties>
    <property name="java.specification.version" value="21"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/renan.lima/Documents/management-system/store-service/target/test-classes:/Users/renan.lima/Documents/management-system/store-service/target/classes:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/renan.lima/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/renan.lima/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/renan.lima/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/renan.lima/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/renan.lima/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/renan.lima/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/renan.lima/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/renan.lima/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/renan.lima/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/renan.lima/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/renan.lima/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/renan.lima/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/renan.lima/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/renan.lima/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/renan.lima/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/renan.lima/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/renan.lima/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/renan.lima/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/renan.lima/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/renan.lima/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/renan.lima/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/renan.lima/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/renan.lima/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/renan.lima/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/renan.lima/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/renan.lima/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/renan.lima/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-actuator/3.2.0/spring-boot-starter-actuator-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-actuator-autoconfigure/3.2.0/spring-boot-actuator-autoconfigure-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-actuator/3.2.0/spring-boot-actuator-3.2.0.jar:/Users/renan.lima/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/renan.lima/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/renan.lima/.m2/repository/io/micrometer/micrometer-jakarta9/1.12.0/micrometer-jakarta9-1.12.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-data-redis/3.2.0/spring-boot-starter-data-redis-3.2.0.jar:/Users/renan.lima/.m2/repository/io/lettuce/lettuce-core/6.3.0.RELEASE/lettuce-core-6.3.0.RELEASE.jar:/Users/renan.lima/.m2/repository/io/netty/netty-common/4.1.101.Final/netty-common-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-handler/4.1.101.Final/netty-handler-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-resolver/4.1.101.Final/netty-resolver-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-buffer/4.1.101.Final/netty-buffer-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-transport-native-unix-common/4.1.101.Final/netty-transport-native-unix-common-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-codec/4.1.101.Final/netty-codec-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-transport/4.1.101.Final/netty-transport-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/projectreactor/reactor-core/3.6.0/reactor-core-3.6.0.jar:/Users/renan.lima/.m2/repository/org/reactivestreams/reactive-streams/1.0.4/reactive-streams-1.0.4.jar:/Users/renan.lima/.m2/repository/org/springframework/data/spring-data-redis/3.2.0/spring-data-redis-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/data/spring-data-keyvalue/3.2.0/spring-data-keyvalue-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-oxm/6.1.1/spring-oxm-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-context-support/6.1.1/spring-context-support-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/kafka/spring-kafka/3.1.0/spring-kafka-3.1.0.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-messaging/6.1.1/spring-messaging-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-clients/3.6.0/kafka-clients-3.6.0.jar:/Users/renan.lima/.m2/repository/com/github/luben/zstd-jni/1.5.5-1/zstd-jni-1.5.5-1.jar:/Users/renan.lima/.m2/repository/org/lz4/lz4-java/1.8.0/lz4-java-1.8.0.jar:/Users/renan.lima/.m2/repository/org/xerial/snappy/snappy-java/1.1.10.4/snappy-java-1.1.10.4.jar:/Users/renan.lima/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/Users/renan.lima/.m2/repository/org/springframework/retry/spring-retry/2.0.4/spring-retry-2.0.4.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/renan.lima/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-spring-boot3/2.1.0/resilience4j-spring-boot3-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-spring6/2.1.0/resilience4j-spring6-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-annotations/2.1.0/resilience4j-annotations-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-consumer/2.1.0/resilience4j-consumer-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-circularbuffer/2.1.0/resilience4j-circularbuffer-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-framework-common/2.1.0/resilience4j-framework-common-2.1.0.jar:/Users/renan.lima/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-micrometer/2.1.0/resilience4j-micrometer-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-bulkhead/2.1.0/resilience4j-bulkhead-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-retry/2.1.0/resilience4j-retry-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-ratelimiter/2.1.0/resilience4j-ratelimiter-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-timelimiter/2.1.0/resilience4j-timelimiter-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-circuitbreaker/2.1.0/resilience4j-circuitbreaker-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-core/2.1.0/resilience4j-core-2.1.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-webflux/3.2.0/spring-boot-starter-webflux-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-reactor-netty/3.2.0/spring-boot-starter-reactor-netty-3.2.0.jar:/Users/renan.lima/.m2/repository/io/projectreactor/netty/reactor-netty-http/1.1.13/reactor-netty-http-1.1.13.jar:/Users/renan.lima/.m2/repository/io/netty/netty-codec-http/4.1.101.Final/netty-codec-http-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-codec-http2/4.1.101.Final/netty-codec-http2-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-resolver-dns/4.1.101.Final/netty-resolver-dns-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-codec-dns/4.1.101.Final/netty-codec-dns-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-resolver-dns-native-macos/4.1.101.Final/netty-resolver-dns-native-macos-4.1.101.Final-osx-x86_64.jar:/Users/renan.lima/.m2/repository/io/netty/netty-resolver-dns-classes-macos/4.1.101.Final/netty-resolver-dns-classes-macos-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-transport-native-epoll/4.1.101.Final/netty-transport-native-epoll-4.1.101.Final-linux-x86_64.jar:/Users/renan.lima/.m2/repository/io/projectreactor/netty/reactor-netty-core/1.1.13/reactor-netty-core-1.1.13.jar:/Users/renan.lima/.m2/repository/io/netty/netty-handler-proxy/4.1.101.Final/netty-handler-proxy-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-codec-socks/4.1.101.Final/netty-codec-socks-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-webflux/6.1.1/spring-webflux-6.1.1.jar:/Users/renan.lima/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/renan.lima/.m2/repository/org/postgresql/postgresql/42.6.0/postgresql-42.6.0.jar:/Users/renan.lima/.m2/repository/org/checkerframework/checker-qual/3.31.0/checker-qual-3.31.0.jar:/Users/renan.lima/.m2/repository/org/flywaydb/flyway-core/9.22.3/flyway-core-9.22.3.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-toml/2.15.3/jackson-dataformat-toml-2.15.3.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/renan.lima/.m2/repository/com/google/code/gson/gson/2.10.1/gson-2.10.1.jar:/Users/renan.lima/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/renan.lima/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-ui/2.2.0/springdoc-openapi-starter-webmvc-ui-2.2.0.jar:/Users/renan.lima/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-api/2.2.0/springdoc-openapi-starter-webmvc-api-2.2.0.jar:/Users/renan.lima/.m2/repository/org/springdoc/springdoc-openapi-starter-common/2.2.0/springdoc-openapi-starter-common-2.2.0.jar:/Users/renan.lima/.m2/repository/io/swagger/core/v3/swagger-core-jakarta/2.2.15/swagger-core-jakarta-2.2.15.jar:/Users/renan.lima/.m2/repository/org/apache/commons/commons-lang3/3.13.0/commons-lang3-3.13.0.jar:/Users/renan.lima/.m2/repository/io/swagger/core/v3/swagger-annotations-jakarta/2.2.15/swagger-annotations-jakarta-2.2.15.jar:/Users/renan.lima/.m2/repository/io/swagger/core/v3/swagger-models-jakarta/2.2.15/swagger-models-jakarta-2.2.15.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.jar:/Users/renan.lima/.m2/repository/org/webjars/swagger-ui/5.2.0/swagger-ui-5.2.0.jar:/Users/renan.lima/.m2/repository/io/micrometer/micrometer-registry-prometheus/1.12.0/micrometer-registry-prometheus-1.12.0.jar:/Users/renan.lima/.m2/repository/io/micrometer/micrometer-core/1.12.0/micrometer-core-1.12.0.jar:/Users/renan.lima/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.12/HdrHistogram-2.1.12.jar:/Users/renan.lima/.m2/repository/org/latencyutils/LatencyUtils/2.0.3/LatencyUtils-2.0.3.jar:/Users/renan.lima/.m2/repository/io/prometheus/simpleclient_common/0.16.0/simpleclient_common-0.16.0.jar:/Users/renan.lima/.m2/repository/io/prometheus/simpleclient/0.16.0/simpleclient-0.16.0.jar:/Users/renan.lima/.m2/repository/io/prometheus/simpleclient_tracer_otel/0.16.0/simpleclient_tracer_otel-0.16.0.jar:/Users/renan.lima/.m2/repository/io/prometheus/simpleclient_tracer_common/0.16.0/simpleclient_tracer_common-0.16.0.jar:/Users/renan.lima/.m2/repository/io/prometheus/simpleclient_tracer_otel_agent/0.16.0/simpleclient_tracer_otel_agent-0.16.0.jar:/Users/renan.lima/.m2/repository/io/micrometer/micrometer-tracing-bridge-brave/1.2.0/micrometer-tracing-bridge-brave-1.2.0.jar:/Users/renan.lima/.m2/repository/io/micrometer/micrometer-tracing/1.2.0/micrometer-tracing-1.2.0.jar:/Users/renan.lima/.m2/repository/io/micrometer/context-propagation/1.1.0/context-propagation-1.1.0.jar:/Users/renan.lima/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/Users/renan.lima/.m2/repository/io/zipkin/brave/brave/5.16.0/brave-5.16.0.jar:/Users/renan.lima/.m2/repository/io/zipkin/brave/brave-context-slf4j/5.16.0/brave-context-slf4j-5.16.0.jar:/Users/renan.lima/.m2/repository/io/zipkin/brave/brave-instrumentation-http/5.16.0/brave-instrumentation-http-5.16.0.jar:/Users/renan.lima/.m2/repository/io/zipkin/aws/brave-propagation-aws/0.23.5/brave-propagation-aws-0.23.5.jar:/Users/renan.lima/.m2/repository/io/zipkin/reporter2/zipkin-reporter-brave/2.16.3/zipkin-reporter-brave-2.16.3.jar:/Users/renan.lima/.m2/repository/io/zipkin/reporter2/zipkin-reporter/2.16.3/zipkin-reporter-2.16.3.jar:/Users/renan.lima/.m2/repository/io/zipkin/zipkin2/zipkin/2.23.2/zipkin-2.23.2.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/renan.lima/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/renan.lima/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/renan.lima/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/renan.lima/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/renan.lima/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/renan.lima/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/renan.lima/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/renan.lima/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/renan.lima/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/renan.lima/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/renan.lima/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/renan.lima/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/renan.lima/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/renan.lima/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/renan.lima/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/renan.lima/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/renan.lima/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/renan.lima/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/renan.lima/.m2/repository/org/springframework/kafka/spring-kafka-test/3.1.0/spring-kafka-test-3.1.0.jar:/Users/renan.lima/.m2/repository/org/apache/zookeeper/zookeeper/3.8.3/zookeeper-3.8.3.jar:/Users/renan.lima/.m2/repository/org/apache/zookeeper/zookeeper-jute/3.8.3/zookeeper-jute-3.8.3.jar:/Users/renan.lima/.m2/repository/org/apache/yetus/audience-annotations/0.12.0/audience-annotations-0.12.0.jar:/Users/renan.lima/.m2/repository/io/netty/netty-transport-native-epoll/4.1.101.Final/netty-transport-native-epoll-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-transport-classes-epoll/4.1.101.Final/netty-transport-classes-epoll-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/renan.lima/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/renan.lima/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-clients/3.6.0/kafka-clients-3.6.0-test.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-metadata/3.6.0/kafka-metadata-3.6.0.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-raft/3.6.0/kafka-raft-3.6.0.jar:/Users/renan.lima/.m2/repository/com/yammer/metrics/metrics-core/2.2.0/metrics-core-2.2.0.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-server-common/3.6.0/kafka-server-common-3.6.0.jar:/Users/renan.lima/.m2/repository/net/sf/jopt-simple/jopt-simple/5.0.4/jopt-simple-5.0.4.jar:/Users/renan.lima/.m2/repository/org/pcollections/pcollections/4.0.1/pcollections-4.0.1.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-server-common/3.6.0/kafka-server-common-3.6.0-test.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-streams-test-utils/3.6.0/kafka-streams-test-utils-3.6.0.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-streams/3.6.0/kafka-streams-3.6.0.jar:/Users/renan.lima/.m2/repository/org/rocksdb/rocksdbjni/7.9.2/rocksdbjni-7.9.2.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka_2.13/3.6.0/kafka_2.13-3.6.0.jar:/Users/renan.lima/.m2/repository/org/scala-lang/scala-library/2.13.11/scala-library-2.13.11.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-group-coordinator/3.6.0/kafka-group-coordinator-3.6.0.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-storage-api/3.6.0/kafka-storage-api-3.6.0.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-tools-api/3.6.0/kafka-tools-api-3.6.0.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-storage/3.6.0/kafka-storage-3.6.0.jar:/Users/renan.lima/.m2/repository/com/github/ben-manes/caffeine/caffeine/3.1.8/caffeine-3.1.8.jar:/Users/renan.lima/.m2/repository/com/google/errorprone/error_prone_annotations/2.21.1/error_prone_annotations-2.21.1.jar:/Users/renan.lima/.m2/repository/net/sourceforge/argparse4j/argparse4j/0.7.0/argparse4j-0.7.0.jar:/Users/renan.lima/.m2/repository/commons-validator/commons-validator/1.7/commons-validator-1.7.jar:/Users/renan.lima/.m2/repository/commons-beanutils/commons-beanutils/1.9.4/commons-beanutils-1.9.4.jar:/Users/renan.lima/.m2/repository/commons-digester/commons-digester/2.1/commons-digester-2.1.jar:/Users/renan.lima/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/module/jackson-module-scala_2.13/2.15.3/jackson-module-scala_2.13-2.15.3.jar:/Users/renan.lima/.m2/repository/com/thoughtworks/paranamer/paranamer/2.8/paranamer-2.8.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-csv/2.15.3/jackson-dataformat-csv-2.15.3.jar:/Users/renan.lima/.m2/repository/org/bitbucket/b_c/jose4j/0.9.3/jose4j-0.9.3.jar:/Users/renan.lima/.m2/repository/org/scala-lang/modules/scala-collection-compat_2.13/2.10.0/scala-collection-compat_2.13-2.10.0.jar:/Users/renan.lima/.m2/repository/org/scala-lang/modules/scala-java8-compat_2.13/1.0.2/scala-java8-compat_2.13-1.0.2.jar:/Users/renan.lima/.m2/repository/org/scala-lang/scala-reflect/2.13.11/scala-reflect-2.13.11.jar:/Users/renan.lima/.m2/repository/com/typesafe/scala-logging/scala-logging_2.13/3.9.4/scala-logging_2.13-3.9.4.jar:/Users/renan.lima/.m2/repository/io/dropwizard/metrics/metrics-core/4.2.22/metrics-core-4.2.22.jar:/Users/renan.lima/.m2/repository/commons-cli/commons-cli/1.4/commons-cli-1.4.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka_2.13/3.6.0/kafka_2.13-3.6.0-test.jar:/Users/renan.lima/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/renan.lima/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/renan.lima/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/renan.lima/.m2/repository/org/junit/platform/junit-platform-launcher/1.10.1/junit-platform-launcher-1.10.1.jar:/Users/renan.lima/.m2/repository/org/testcontainers/junit-jupiter/1.19.3/junit-jupiter-1.19.3.jar:/Users/renan.lima/.m2/repository/org/testcontainers/testcontainers/1.19.3/testcontainers-1.19.3.jar:/Users/renan.lima/.m2/repository/org/apache/commons/commons-compress/1.24.0/commons-compress-1.24.0.jar:/Users/renan.lima/.m2/repository/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar:/Users/renan.lima/.m2/repository/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar:/Users/renan.lima/.m2/repository/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.jar:/Users/renan.lima/.m2/repository/com/github/docker-java/docker-java-transport-zerodep/3.3.4/docker-java-transport-zerodep-3.3.4.jar:/Users/renan.lima/.m2/repository/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.jar:/Users/renan.lima/.m2/repository/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar:/Users/renan.lima/.m2/repository/org/testcontainers/postgresql/1.19.3/postgresql-1.19.3.jar:/Users/renan.lima/.m2/repository/org/testcontainers/jdbc/1.19.3/jdbc-1.19.3.jar:/Users/renan.lima/.m2/repository/org/testcontainers/database-commons/1.19.3/database-commons-1.19.3.jar:/Users/renan.lima/.m2/repository/org/testcontainers/kafka/1.19.3/kafka-1.19.3.jar:/Users/renan.lima/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-java/7.15.0/cucumber-java-7.15.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-core/7.15.0/cucumber-core-7.15.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-gherkin/7.15.0/cucumber-gherkin-7.15.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-gherkin-messages/7.15.0/cucumber-gherkin-messages-7.15.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/gherkin/26.2.0/gherkin-26.2.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/messages/22.0.0/messages-22.0.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/tag-expressions/6.0.0/tag-expressions-6.0.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-expressions/17.0.1/cucumber-expressions-17.0.1.jar:/Users/renan.lima/.m2/repository/io/cucumber/datatable/7.15.0/datatable-7.15.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-plugin/7.15.0/cucumber-plugin-7.15.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/docstring/7.15.0/docstring-7.15.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/html-formatter/20.4.0/html-formatter-20.4.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/junit-xml-formatter/0.2.0/junit-xml-formatter-0.2.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/ci-environment/10.0.0/ci-environment-10.0.0.jar:/Users/renan.lima/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-spring/7.15.0/cucumber-spring-7.15.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-junit-platform-engine/7.15.0/cucumber-junit-platform-engine-7.15.0.jar:/Users/renan.lima/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-junit/7.15.0/cucumber-junit-7.15.0.jar:/Users/renan.lima/.m2/repository/org/junit/platform/junit-platform-suite/1.10.1/junit-platform-suite-1.10.1.jar:/Users/renan.lima/.m2/repository/org/junit/platform/junit-platform-suite-api/1.10.1/junit-platform-suite-api-1.10.1.jar:/Users/renan.lima/.m2/repository/org/junit/platform/junit-platform-suite-engine/1.10.1/junit-platform-suite-engine-1.10.1.jar:/Users/renan.lima/.m2/repository/org/junit/platform/junit-platform-suite-commons/1.10.1/junit-platform-suite-commons-1.10.1.jar:/Users/renan.lima/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/renan.lima/.m2/repository/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar:"/>
    <property name="java.vm.vendor" value="Eclipse Adoptium"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="catalina.useNaming" value="false"/>
    <property name="java.vendor.url" value="https://adoptium.net/"/>
    <property name="user.timezone" value="America/Sao_Paulo"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="21"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="BR"/>
    <property name="sun.boot.library.path" value="/Users/renan.lima/.sdkman/candidates/java/21.0.4-tem/lib"/>
    <property name="sun.java.command" value="/Users/renan.lima/Documents/management-system/store-service/target/surefire/surefirebooter-20250901185423514_3.jar /Users/renan.lima/Documents/management-system/store-service/target/surefire 2025-09-01T18-54-23_170-jvmRun1 surefire-20250901185423514_1tmp surefire_0-20250901185423514_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="test" value="CucumberTestRunner"/>
    <property name="surefire.test.class.path" value="/Users/renan.lima/Documents/management-system/store-service/target/test-classes:/Users/renan.lima/Documents/management-system/store-service/target/classes:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.2.0/spring-boot-starter-web-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter/3.2.0/spring-boot-starter-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot/3.2.0/spring-boot-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.2.0/spring-boot-autoconfigure-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.2.0/spring-boot-starter-logging-3.2.0.jar:/Users/renan.lima/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.21.1/log4j-to-slf4j-2.21.1.jar:/Users/renan.lima/.m2/repository/org/apache/logging/log4j/log4j-api/2.21.1/log4j-api-2.21.1.jar:/Users/renan.lima/.m2/repository/org/slf4j/jul-to-slf4j/2.0.9/jul-to-slf4j-2.0.9.jar:/Users/renan.lima/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/renan.lima/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.2.0/spring-boot-starter-json-3.2.0.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.3/jackson-databind-2.15.3.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.3/jackson-annotations-2.15.3.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.3/jackson-datatype-jdk8-2.15.3.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.3/jackson-datatype-jsr310-2.15.3.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.3/jackson-module-parameter-names-2.15.3.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.2.0/spring-boot-starter-tomcat-3.2.0.jar:/Users/renan.lima/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.16/tomcat-embed-core-10.1.16.jar:/Users/renan.lima/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.16/tomcat-embed-websocket-10.1.16.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-web/6.1.1/spring-web-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-beans/6.1.1/spring-beans-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-webmvc/6.1.1/spring-webmvc-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-aop/6.1.1/spring-aop-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-expression/6.1.1/spring-expression-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.2.0/spring-boot-starter-data-jpa-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.2.0/spring-boot-starter-aop-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.2.0/spring-boot-starter-jdbc-3.2.0.jar:/Users/renan.lima/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-jdbc/6.1.1/spring-jdbc-6.1.1.jar:/Users/renan.lima/.m2/repository/org/hibernate/orm/hibernate-core/6.3.1.Final/hibernate-core-6.3.1.Final.jar:/Users/renan.lima/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/renan.lima/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/renan.lima/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/renan.lima/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/renan.lima/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/renan.lima/.m2/repository/com/fasterxml/classmate/1.6.0/classmate-1.6.0.jar:/Users/renan.lima/.m2/repository/net/bytebuddy/byte-buddy/1.14.10/byte-buddy-1.14.10.jar:/Users/renan.lima/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.4/jaxb-runtime-4.0.4.jar:/Users/renan.lima/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.4/jaxb-core-4.0.4.jar:/Users/renan.lima/.m2/repository/org/eclipse/angus/angus-activation/2.0.1/angus-activation-2.0.1.jar:/Users/renan.lima/.m2/repository/org/glassfish/jaxb/txw2/4.0.4/txw2-4.0.4.jar:/Users/renan.lima/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/renan.lima/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/renan.lima/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/Users/renan.lima/.m2/repository/org/springframework/data/spring-data-jpa/3.2.0/spring-data-jpa-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/data/spring-data-commons/3.2.0/spring-data-commons-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-orm/6.1.1/spring-orm-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.2.0/spring-boot-starter-validation-3.2.0.jar:/Users/renan.lima/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.16/tomcat-embed-el-10.1.16.jar:/Users/renan.lima/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/renan.lima/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-actuator/3.2.0/spring-boot-starter-actuator-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-actuator-autoconfigure/3.2.0/spring-boot-actuator-autoconfigure-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-actuator/3.2.0/spring-boot-actuator-3.2.0.jar:/Users/renan.lima/.m2/repository/io/micrometer/micrometer-observation/1.12.0/micrometer-observation-1.12.0.jar:/Users/renan.lima/.m2/repository/io/micrometer/micrometer-commons/1.12.0/micrometer-commons-1.12.0.jar:/Users/renan.lima/.m2/repository/io/micrometer/micrometer-jakarta9/1.12.0/micrometer-jakarta9-1.12.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-data-redis/3.2.0/spring-boot-starter-data-redis-3.2.0.jar:/Users/renan.lima/.m2/repository/io/lettuce/lettuce-core/6.3.0.RELEASE/lettuce-core-6.3.0.RELEASE.jar:/Users/renan.lima/.m2/repository/io/netty/netty-common/4.1.101.Final/netty-common-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-handler/4.1.101.Final/netty-handler-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-resolver/4.1.101.Final/netty-resolver-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-buffer/4.1.101.Final/netty-buffer-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-transport-native-unix-common/4.1.101.Final/netty-transport-native-unix-common-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-codec/4.1.101.Final/netty-codec-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-transport/4.1.101.Final/netty-transport-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/projectreactor/reactor-core/3.6.0/reactor-core-3.6.0.jar:/Users/renan.lima/.m2/repository/org/reactivestreams/reactive-streams/1.0.4/reactive-streams-1.0.4.jar:/Users/renan.lima/.m2/repository/org/springframework/data/spring-data-redis/3.2.0/spring-data-redis-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/data/spring-data-keyvalue/3.2.0/spring-data-keyvalue-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-oxm/6.1.1/spring-oxm-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-context-support/6.1.1/spring-context-support-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/kafka/spring-kafka/3.1.0/spring-kafka-3.1.0.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-context/6.1.1/spring-context-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-messaging/6.1.1/spring-messaging-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-tx/6.1.1/spring-tx-6.1.1.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-clients/3.6.0/kafka-clients-3.6.0.jar:/Users/renan.lima/.m2/repository/com/github/luben/zstd-jni/1.5.5-1/zstd-jni-1.5.5-1.jar:/Users/renan.lima/.m2/repository/org/lz4/lz4-java/1.8.0/lz4-java-1.8.0.jar:/Users/renan.lima/.m2/repository/org/xerial/snappy/snappy-java/1.1.10.4/snappy-java-1.1.10.4.jar:/Users/renan.lima/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/Users/renan.lima/.m2/repository/org/springframework/retry/spring-retry/2.0.4/spring-retry-2.0.4.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-aspects/6.1.1/spring-aspects-6.1.1.jar:/Users/renan.lima/.m2/repository/org/aspectj/aspectjweaver/1.9.20.1/aspectjweaver-1.9.20.1.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-spring-boot3/2.1.0/resilience4j-spring-boot3-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-spring6/2.1.0/resilience4j-spring6-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-annotations/2.1.0/resilience4j-annotations-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-consumer/2.1.0/resilience4j-consumer-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-circularbuffer/2.1.0/resilience4j-circularbuffer-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-framework-common/2.1.0/resilience4j-framework-common-2.1.0.jar:/Users/renan.lima/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-micrometer/2.1.0/resilience4j-micrometer-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-bulkhead/2.1.0/resilience4j-bulkhead-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-retry/2.1.0/resilience4j-retry-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-ratelimiter/2.1.0/resilience4j-ratelimiter-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-timelimiter/2.1.0/resilience4j-timelimiter-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-circuitbreaker/2.1.0/resilience4j-circuitbreaker-2.1.0.jar:/Users/renan.lima/.m2/repository/io/github/resilience4j/resilience4j-core/2.1.0/resilience4j-core-2.1.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-webflux/3.2.0/spring-boot-starter-webflux-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-reactor-netty/3.2.0/spring-boot-starter-reactor-netty-3.2.0.jar:/Users/renan.lima/.m2/repository/io/projectreactor/netty/reactor-netty-http/1.1.13/reactor-netty-http-1.1.13.jar:/Users/renan.lima/.m2/repository/io/netty/netty-codec-http/4.1.101.Final/netty-codec-http-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-codec-http2/4.1.101.Final/netty-codec-http2-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-resolver-dns/4.1.101.Final/netty-resolver-dns-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-codec-dns/4.1.101.Final/netty-codec-dns-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-resolver-dns-native-macos/4.1.101.Final/netty-resolver-dns-native-macos-4.1.101.Final-osx-x86_64.jar:/Users/renan.lima/.m2/repository/io/netty/netty-resolver-dns-classes-macos/4.1.101.Final/netty-resolver-dns-classes-macos-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-transport-native-epoll/4.1.101.Final/netty-transport-native-epoll-4.1.101.Final-linux-x86_64.jar:/Users/renan.lima/.m2/repository/io/projectreactor/netty/reactor-netty-core/1.1.13/reactor-netty-core-1.1.13.jar:/Users/renan.lima/.m2/repository/io/netty/netty-handler-proxy/4.1.101.Final/netty-handler-proxy-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-codec-socks/4.1.101.Final/netty-codec-socks-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-webflux/6.1.1/spring-webflux-6.1.1.jar:/Users/renan.lima/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/Users/renan.lima/.m2/repository/org/postgresql/postgresql/42.6.0/postgresql-42.6.0.jar:/Users/renan.lima/.m2/repository/org/checkerframework/checker-qual/3.31.0/checker-qual-3.31.0.jar:/Users/renan.lima/.m2/repository/org/flywaydb/flyway-core/9.22.3/flyway-core-9.22.3.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-toml/2.15.3/jackson-dataformat-toml-2.15.3.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.3/jackson-core-2.15.3.jar:/Users/renan.lima/.m2/repository/com/google/code/gson/gson/2.10.1/gson-2.10.1.jar:/Users/renan.lima/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar:/Users/renan.lima/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-ui/2.2.0/springdoc-openapi-starter-webmvc-ui-2.2.0.jar:/Users/renan.lima/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-api/2.2.0/springdoc-openapi-starter-webmvc-api-2.2.0.jar:/Users/renan.lima/.m2/repository/org/springdoc/springdoc-openapi-starter-common/2.2.0/springdoc-openapi-starter-common-2.2.0.jar:/Users/renan.lima/.m2/repository/io/swagger/core/v3/swagger-core-jakarta/2.2.15/swagger-core-jakarta-2.2.15.jar:/Users/renan.lima/.m2/repository/org/apache/commons/commons-lang3/3.13.0/commons-lang3-3.13.0.jar:/Users/renan.lima/.m2/repository/io/swagger/core/v3/swagger-annotations-jakarta/2.2.15/swagger-annotations-jakarta-2.2.15.jar:/Users/renan.lima/.m2/repository/io/swagger/core/v3/swagger-models-jakarta/2.2.15/swagger-models-jakarta-2.2.15.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.3/jackson-dataformat-yaml-2.15.3.jar:/Users/renan.lima/.m2/repository/org/webjars/swagger-ui/5.2.0/swagger-ui-5.2.0.jar:/Users/renan.lima/.m2/repository/io/micrometer/micrometer-registry-prometheus/1.12.0/micrometer-registry-prometheus-1.12.0.jar:/Users/renan.lima/.m2/repository/io/micrometer/micrometer-core/1.12.0/micrometer-core-1.12.0.jar:/Users/renan.lima/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.12/HdrHistogram-2.1.12.jar:/Users/renan.lima/.m2/repository/org/latencyutils/LatencyUtils/2.0.3/LatencyUtils-2.0.3.jar:/Users/renan.lima/.m2/repository/io/prometheus/simpleclient_common/0.16.0/simpleclient_common-0.16.0.jar:/Users/renan.lima/.m2/repository/io/prometheus/simpleclient/0.16.0/simpleclient-0.16.0.jar:/Users/renan.lima/.m2/repository/io/prometheus/simpleclient_tracer_otel/0.16.0/simpleclient_tracer_otel-0.16.0.jar:/Users/renan.lima/.m2/repository/io/prometheus/simpleclient_tracer_common/0.16.0/simpleclient_tracer_common-0.16.0.jar:/Users/renan.lima/.m2/repository/io/prometheus/simpleclient_tracer_otel_agent/0.16.0/simpleclient_tracer_otel_agent-0.16.0.jar:/Users/renan.lima/.m2/repository/io/micrometer/micrometer-tracing-bridge-brave/1.2.0/micrometer-tracing-bridge-brave-1.2.0.jar:/Users/renan.lima/.m2/repository/io/micrometer/micrometer-tracing/1.2.0/micrometer-tracing-1.2.0.jar:/Users/renan.lima/.m2/repository/io/micrometer/context-propagation/1.1.0/context-propagation-1.1.0.jar:/Users/renan.lima/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/Users/renan.lima/.m2/repository/io/zipkin/brave/brave/5.16.0/brave-5.16.0.jar:/Users/renan.lima/.m2/repository/io/zipkin/brave/brave-context-slf4j/5.16.0/brave-context-slf4j-5.16.0.jar:/Users/renan.lima/.m2/repository/io/zipkin/brave/brave-instrumentation-http/5.16.0/brave-instrumentation-http-5.16.0.jar:/Users/renan.lima/.m2/repository/io/zipkin/aws/brave-propagation-aws/0.23.5/brave-propagation-aws-0.23.5.jar:/Users/renan.lima/.m2/repository/io/zipkin/reporter2/zipkin-reporter-brave/2.16.3/zipkin-reporter-brave-2.16.3.jar:/Users/renan.lima/.m2/repository/io/zipkin/reporter2/zipkin-reporter/2.16.3/zipkin-reporter-2.16.3.jar:/Users/renan.lima/.m2/repository/io/zipkin/zipkin2/zipkin/2.23.2/zipkin-2.23.2.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.2.0/spring-boot-starter-test-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-test/3.2.0/spring-boot-test-3.2.0.jar:/Users/renan.lima/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.2.0/spring-boot-test-autoconfigure-3.2.0.jar:/Users/renan.lima/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/Users/renan.lima/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.1/jakarta.xml.bind-api-4.0.1.jar:/Users/renan.lima/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/Users/renan.lima/.m2/repository/net/minidev/json-smart/2.5.0/json-smart-2.5.0.jar:/Users/renan.lima/.m2/repository/net/minidev/accessors-smart/2.5.0/accessors-smart-2.5.0.jar:/Users/renan.lima/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/Users/renan.lima/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/Users/renan.lima/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/renan.lima/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.1/junit-jupiter-5.10.1.jar:/Users/renan.lima/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.1/junit-jupiter-params-5.10.1.jar:/Users/renan.lima/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.1/junit-jupiter-engine-5.10.1.jar:/Users/renan.lima/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/Users/renan.lima/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar:/Users/renan.lima/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/renan.lima/.m2/repository/org/mockito/mockito-junit-jupiter/5.7.0/mockito-junit-jupiter-5.7.0.jar:/Users/renan.lima/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/renan.lima/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-core/6.1.1/spring-core-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-jcl/6.1.1/spring-jcl-6.1.1.jar:/Users/renan.lima/.m2/repository/org/springframework/spring-test/6.1.1/spring-test-6.1.1.jar:/Users/renan.lima/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/renan.lima/.m2/repository/org/springframework/kafka/spring-kafka-test/3.1.0/spring-kafka-test-3.1.0.jar:/Users/renan.lima/.m2/repository/org/apache/zookeeper/zookeeper/3.8.3/zookeeper-3.8.3.jar:/Users/renan.lima/.m2/repository/org/apache/zookeeper/zookeeper-jute/3.8.3/zookeeper-jute-3.8.3.jar:/Users/renan.lima/.m2/repository/org/apache/yetus/audience-annotations/0.12.0/audience-annotations-0.12.0.jar:/Users/renan.lima/.m2/repository/io/netty/netty-transport-native-epoll/4.1.101.Final/netty-transport-native-epoll-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/io/netty/netty-transport-classes-epoll/4.1.101.Final/netty-transport-classes-epoll-4.1.101.Final.jar:/Users/renan.lima/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/Users/renan.lima/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/Users/renan.lima/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-clients/3.6.0/kafka-clients-3.6.0-test.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-metadata/3.6.0/kafka-metadata-3.6.0.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-raft/3.6.0/kafka-raft-3.6.0.jar:/Users/renan.lima/.m2/repository/com/yammer/metrics/metrics-core/2.2.0/metrics-core-2.2.0.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-server-common/3.6.0/kafka-server-common-3.6.0.jar:/Users/renan.lima/.m2/repository/net/sf/jopt-simple/jopt-simple/5.0.4/jopt-simple-5.0.4.jar:/Users/renan.lima/.m2/repository/org/pcollections/pcollections/4.0.1/pcollections-4.0.1.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-server-common/3.6.0/kafka-server-common-3.6.0-test.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-streams-test-utils/3.6.0/kafka-streams-test-utils-3.6.0.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-streams/3.6.0/kafka-streams-3.6.0.jar:/Users/renan.lima/.m2/repository/org/rocksdb/rocksdbjni/7.9.2/rocksdbjni-7.9.2.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka_2.13/3.6.0/kafka_2.13-3.6.0.jar:/Users/renan.lima/.m2/repository/org/scala-lang/scala-library/2.13.11/scala-library-2.13.11.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-group-coordinator/3.6.0/kafka-group-coordinator-3.6.0.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-storage-api/3.6.0/kafka-storage-api-3.6.0.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-tools-api/3.6.0/kafka-tools-api-3.6.0.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka-storage/3.6.0/kafka-storage-3.6.0.jar:/Users/renan.lima/.m2/repository/com/github/ben-manes/caffeine/caffeine/3.1.8/caffeine-3.1.8.jar:/Users/renan.lima/.m2/repository/com/google/errorprone/error_prone_annotations/2.21.1/error_prone_annotations-2.21.1.jar:/Users/renan.lima/.m2/repository/net/sourceforge/argparse4j/argparse4j/0.7.0/argparse4j-0.7.0.jar:/Users/renan.lima/.m2/repository/commons-validator/commons-validator/1.7/commons-validator-1.7.jar:/Users/renan.lima/.m2/repository/commons-beanutils/commons-beanutils/1.9.4/commons-beanutils-1.9.4.jar:/Users/renan.lima/.m2/repository/commons-digester/commons-digester/2.1/commons-digester-2.1.jar:/Users/renan.lima/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/module/jackson-module-scala_2.13/2.15.3/jackson-module-scala_2.13-2.15.3.jar:/Users/renan.lima/.m2/repository/com/thoughtworks/paranamer/paranamer/2.8/paranamer-2.8.jar:/Users/renan.lima/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-csv/2.15.3/jackson-dataformat-csv-2.15.3.jar:/Users/renan.lima/.m2/repository/org/bitbucket/b_c/jose4j/0.9.3/jose4j-0.9.3.jar:/Users/renan.lima/.m2/repository/org/scala-lang/modules/scala-collection-compat_2.13/2.10.0/scala-collection-compat_2.13-2.10.0.jar:/Users/renan.lima/.m2/repository/org/scala-lang/modules/scala-java8-compat_2.13/1.0.2/scala-java8-compat_2.13-1.0.2.jar:/Users/renan.lima/.m2/repository/org/scala-lang/scala-reflect/2.13.11/scala-reflect-2.13.11.jar:/Users/renan.lima/.m2/repository/com/typesafe/scala-logging/scala-logging_2.13/3.9.4/scala-logging_2.13-3.9.4.jar:/Users/renan.lima/.m2/repository/io/dropwizard/metrics/metrics-core/4.2.22/metrics-core-4.2.22.jar:/Users/renan.lima/.m2/repository/commons-cli/commons-cli/1.4/commons-cli-1.4.jar:/Users/renan.lima/.m2/repository/org/apache/kafka/kafka_2.13/3.6.0/kafka_2.13-3.6.0-test.jar:/Users/renan.lima/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.1/junit-jupiter-api-5.10.1.jar:/Users/renan.lima/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/renan.lima/.m2/repository/org/junit/platform/junit-platform-commons/1.10.1/junit-platform-commons-1.10.1.jar:/Users/renan.lima/.m2/repository/org/junit/platform/junit-platform-launcher/1.10.1/junit-platform-launcher-1.10.1.jar:/Users/renan.lima/.m2/repository/org/testcontainers/junit-jupiter/1.19.3/junit-jupiter-1.19.3.jar:/Users/renan.lima/.m2/repository/org/testcontainers/testcontainers/1.19.3/testcontainers-1.19.3.jar:/Users/renan.lima/.m2/repository/org/apache/commons/commons-compress/1.24.0/commons-compress-1.24.0.jar:/Users/renan.lima/.m2/repository/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar:/Users/renan.lima/.m2/repository/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar:/Users/renan.lima/.m2/repository/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.jar:/Users/renan.lima/.m2/repository/com/github/docker-java/docker-java-transport-zerodep/3.3.4/docker-java-transport-zerodep-3.3.4.jar:/Users/renan.lima/.m2/repository/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.jar:/Users/renan.lima/.m2/repository/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar:/Users/renan.lima/.m2/repository/org/testcontainers/postgresql/1.19.3/postgresql-1.19.3.jar:/Users/renan.lima/.m2/repository/org/testcontainers/jdbc/1.19.3/jdbc-1.19.3.jar:/Users/renan.lima/.m2/repository/org/testcontainers/database-commons/1.19.3/database-commons-1.19.3.jar:/Users/renan.lima/.m2/repository/org/testcontainers/kafka/1.19.3/kafka-1.19.3.jar:/Users/renan.lima/.m2/repository/org/awaitility/awaitility/4.2.0/awaitility-4.2.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-java/7.15.0/cucumber-java-7.15.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-core/7.15.0/cucumber-core-7.15.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-gherkin/7.15.0/cucumber-gherkin-7.15.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-gherkin-messages/7.15.0/cucumber-gherkin-messages-7.15.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/gherkin/26.2.0/gherkin-26.2.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/messages/22.0.0/messages-22.0.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/tag-expressions/6.0.0/tag-expressions-6.0.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-expressions/17.0.1/cucumber-expressions-17.0.1.jar:/Users/renan.lima/.m2/repository/io/cucumber/datatable/7.15.0/datatable-7.15.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-plugin/7.15.0/cucumber-plugin-7.15.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/docstring/7.15.0/docstring-7.15.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/html-formatter/20.4.0/html-formatter-20.4.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/junit-xml-formatter/0.2.0/junit-xml-formatter-0.2.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/ci-environment/10.0.0/ci-environment-10.0.0.jar:/Users/renan.lima/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-spring/7.15.0/cucumber-spring-7.15.0.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-junit-platform-engine/7.15.0/cucumber-junit-platform-engine-7.15.0.jar:/Users/renan.lima/.m2/repository/org/junit/platform/junit-platform-engine/1.10.1/junit-platform-engine-1.10.1.jar:/Users/renan.lima/.m2/repository/io/cucumber/cucumber-junit/7.15.0/cucumber-junit-7.15.0.jar:/Users/renan.lima/.m2/repository/org/junit/platform/junit-platform-suite/1.10.1/junit-platform-suite-1.10.1.jar:/Users/renan.lima/.m2/repository/org/junit/platform/junit-platform-suite-api/1.10.1/junit-platform-suite-api-1.10.1.jar:/Users/renan.lima/.m2/repository/org/junit/platform/junit-platform-suite-engine/1.10.1/junit-platform-suite-engine-1.10.1.jar:/Users/renan.lima/.m2/repository/org/junit/platform/junit-platform-suite-commons/1.10.1/junit-platform-suite-commons-1.10.1.jar:/Users/renan.lima/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/renan.lima/.m2/repository/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/renan.lima"/>
    <property name="user.language" value="pt"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2024-07-16"/>
    <property name="java.home" value="/Users/renan.lima/.sdkman/candidates/java/21.0.4-tem"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/renan.lima/Documents/management-system/store-service"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="apple.awt.application.name" value="ForkedBooter"/>
    <property name="surefire.real.class.path" value="/Users/renan.lima/Documents/management-system/store-service/target/surefire/surefirebooter-20250901185423514_3.jar"/>
    <property name="java.util.logging.config.file" value="src/test/resources/logging.properties"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="21.0.4+7-LTS"/>
    <property name="LOG_CORRELATION_PATTERN" value="%correlationId"/>
    <property name="user.name" value="renan.lima"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="15.5"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Temurin-21.0.4+7"/>
    <property name="localRepository" value="/Users/renan.lima/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/adoptium/adoptium-support/issues"/>
    <property name="java.io.tmpdir" value="/var/folders/zv/49fs5jtn33v4fttychlntrxw0000gp/T/"/>
    <property name="catalina.home" value="/private/var/folders/zv/49fs5jtn33v4fttychlntrxw0000gp/T/tomcat.0.6061468503503511732"/>
    <property name="com.zaxxer.hikari.pool_number" value="1"/>
    <property name="java.version" value="21.0.4"/>
    <property name="user.dir" value="/Users/renan.lima/Documents/management-system/store-service"/>
    <property name="os.arch" value="aarch64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="87518"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="catalina.base" value="/private/var/folders/zv/49fs5jtn33v4fttychlntrxw0000gp/T/tomcat.0.6061468503503511732"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/renan.lima/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Eclipse Adoptium"/>
    <property name="java.vm.version" value="21.0.4+7-LTS"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="65.0"/>
    <property name="LOGGED_APPLICATION_NAME" value="[store-service-test] "/>
  </properties>
  <testcase name="Sincronização de reserva de produto com sucesso" classname="Sincronização de Estoque em Tempo Real - Testes Integrados" time="9.195">
    <failure message="&#10;expected: 200 OK&#10; but was: 404 NOT_FOUND" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 

expected: 200 OK
 but was: 404 NOT_FOUND
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
	at com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta(IntegratedInventorySyncSteps.java:89)
	at ✽.que o sistema está rodando com infraestrutura completa(classpath:features/integration/real-time-inventory-sync.feature:9)
]]></failure>
    <system-out><![CDATA[18:54:25.217 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
18:54:25.324 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.0)

2025-09-01T18:54:25.758-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.CucumberSpringConfiguration    : Starting CucumberSpringConfiguration using Java 21.0.4 with PID 87518 (started by renan.lima in /Users/renan.lima/Documents/management-system/store-service)
2025-09-01T18:54:25.759-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.CucumberSpringConfiguration    : Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-01T18:54:25.760-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.CucumberSpringConfiguration    : The following 1 profile is active: "test"
2025-09-01T18:54:26.845-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01T18:54:26.846-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-01T18:54:26.972-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 119 ms. Found 2 JPA repository interfaces.
2025-09-01T18:54:26.985-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01T18:54:26.986-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-01T18:54:27.004-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.inventory.management.store.infrastructure.adapter.out.persistence.FailedEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01T18:54:27.004-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.inventory.management.store.infrastructure.adapter.out.persistence.ProductJpaRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01T18:54:27.004-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-09-01T18:54:27.984-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 0 (http)
2025-09-01T18:54:27.993-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-09-01T18:54:27.993-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-01T18:54:28.042-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-09-01T18:54:28.043-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2269 ms
2025-09-01T18:54:28.156-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] i.n.r.d.DnsServerAddressStreamProviders  : Unable to load io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider, fallback to system defaults. This may result in incorrect DNS resolutions on MacOS. Check whether you have a dependency on 'io.netty:netty-resolver-dns-native-macos'. Use DEBUG level to see the full stack: java.lang.UnsatisfiedLinkError: failed to load the required native library
2025-09-01T18:54:28.708-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-09-01T18:54:28.943-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2025-09-01T18:54:28.945-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-09-01T18:54:28.954-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2025-09-01T18:54:29.049-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.w.f.ServerHttpObservationFilter      : Filter 'webMvcObservationFilter' configured for use
2025-09-01T18:54:29.050-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.filter.RateLimitFilter         : Filter 'rateLimitFilter' configured for use
2025-09-01T18:54:29.070-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Fetching JDBC Connection from DataSource
2025-09-01T18:54:29.070-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.init.ScriptUtils     : Executing SQL script from class path resource [schema.sql]
2025-09-01T18:54:29.080-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.init.ScriptUtils     : 0 returned as update count for SQL: CREATE SCHEMA IF NOT EXISTS store_service
2025-09-01T18:54:29.086-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.init.ScriptUtils     : 0 returned as update count for SQL: CREATE TABLE IF NOT EXISTS store_service.products ( id UUID PRIMARY KEY, sku VARCHAR(100) NOT NULL, name VARCHAR(255) NOT NULL, description TEXT, price DECIMAL(19,2) NOT NULL, quantity INTEGER NOT NULL DEFAULT 0, reserved_quantity INTEGER NOT NULL DEFAULT 0, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, store_id VARCHAR(50) NOT NULL, active BOOLEAN NOT NULL DEFAULT true, CONSTRAINT uk_products_sku_store UNIQUE (sku, store_id) )
2025-09-01T18:54:29.086-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.init.ScriptUtils     : 0 returned as update count for SQL: CREATE INDEX IF NOT EXISTS idx_store_sku ON store_service.products(store_id, sku)
2025-09-01T18:54:29.087-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.init.ScriptUtils     : 0 returned as update count for SQL: CREATE INDEX IF NOT EXISTS idx_store_name ON store_service.products(store_id, name)
2025-09-01T18:54:29.087-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.init.ScriptUtils     : 0 returned as update count for SQL: CREATE INDEX IF NOT EXISTS idx_active ON store_service.products(active)
2025-09-01T18:54:29.089-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.init.ScriptUtils     : Executed SQL script from class path resource [schema.sql] in 18 ms.
2025-09-01T18:54:29.179-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-01T18:54:29.226-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-01T18:54:29.253-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-09-01T18:54:29.451-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-01T18:54:29.497-03:00  WARN 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.orm.deprecation            : HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-01T18:54:30.486-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-01T18:54:30.488-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-01T18:54:30.799-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-01T18:54:31.926-03:00  WARN 87518 --- [store-service-test] [           main] [                                                 ] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-09-01T18:54:32.144-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] s.w.s.m.m.a.RequestMappingHandlerMapping : 23 mappings in 'requestMappingHandlerMapping'
2025-09-01T18:54:32.229-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.w.s.handler.SimpleUrlHandlerMapping  : Patterns [/webjars/**, /**, /swagger-ui*/*swagger-initializer.js, /swagger-ui*/**] in 'resourceHandlerMapping'
2025-09-01T18:54:32.322-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] s.w.s.m.m.a.RequestMappingHandlerAdapter : ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-09-01T18:54:32.364-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] .m.m.a.ExceptionHandlerExceptionResolver : ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-09-01T18:54:33.332-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 1 endpoint(s) beneath base path '/actuator'
2025-09-01T18:54:33.419-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 56137 (http) with context path ''
2025-09-01T18:54:33.446-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.CucumberSpringConfiguration    : Started CucumberSpringConfiguration in 8.017 seconds (process running for 9.859)
2025-09-01T18:54:33.532-03:00 DEBUG 87518 --- [store-service-test] [   scheduling-1] [68b61619c554c32be889cd6f5684a574-e889cd6f5684a574] org.hibernate.SQL                        : select fe1_0.id,fe1_0.created_at,fe1_0.event_id,fe1_0.event_payload,fe1_0.event_type,fe1_0.last_error,fe1_0.last_retry_at,fe1_0.max_retries,fe1_0.next_retry_at,fe1_0.partition_key,fe1_0.retry_count,fe1_0.status,fe1_0.topic from store_service.failed_events fe1_0 where fe1_0.status='PENDING' and fe1_0.next_retry_at<=? and fe1_0.retry_count<fe1_0.max_retries order by fe1_0.next_retry_at
2025-09-01T18:54:33.539-03:00  WARN 87518 --- [store-service-test] [   scheduling-1] [68b61619c554c32be889cd6f5684a574-e889cd6f5684a574] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 42102, SQLState: 42S02
2025-09-01T18:54:33.539-03:00 ERROR 87518 --- [store-service-test] [   scheduling-1] [68b61619c554c32be889cd6f5684a574-e889cd6f5684a574] o.h.engine.jdbc.spi.SqlExceptionHelper   : Table "failed_events" not found; SQL statement:
select fe1_0.id,fe1_0.created_at,fe1_0.event_id,fe1_0.event_payload,fe1_0.event_type,fe1_0.last_error,fe1_0.last_retry_at,fe1_0.max_retries,fe1_0.next_retry_at,fe1_0.partition_key,fe1_0.retry_count,fe1_0.status,fe1_0.topic from store_service.failed_events fe1_0 where fe1_0.status='PENDING' and fe1_0.next_retry_at<=? and fe1_0.retry_count<fe1_0.max_retries order by fe1_0.next_retry_at [42102-224]
2025-09-01T18:54:33.552-03:00 ERROR 87518 --- [store-service-test] [   scheduling-1] [                                                 ] o.s.s.s.TaskUtils$LoggingErrorHandler    : Unexpected error occurred in scheduled task

org.springframework.dao.InvalidDataAccessResourceUsageException: could not prepare statement [Table "failed_events" not found; SQL statement:
select fe1_0.id,fe1_0.created_at,fe1_0.event_id,fe1_0.event_payload,fe1_0.event_type,fe1_0.last_error,fe1_0.last_retry_at,fe1_0.max_retries,fe1_0.next_retry_at,fe1_0.partition_key,fe1_0.retry_count,fe1_0.status,fe1_0.topic from store_service.failed_events fe1_0 where fe1_0.status='PENDING' and fe1_0.next_retry_at<=? and fe1_0.retry_count<fe1_0.max_retries order by fe1_0.next_retry_at [42102-224]] [select fe1_0.id,fe1_0.created_at,fe1_0.event_id,fe1_0.event_payload,fe1_0.event_type,fe1_0.last_error,fe1_0.last_retry_at,fe1_0.max_retries,fe1_0.next_retry_at,fe1_0.partition_key,fe1_0.retry_count,fe1_0.status,fe1_0.topic from store_service.failed_events fe1_0 where fe1_0.status='PENDING' and fe1_0.next_retry_at<=? and fe1_0.retry_count<fe1_0.max_retries order by fe1_0.next_retry_at]; SQL [select fe1_0.id,fe1_0.created_at,fe1_0.event_id,fe1_0.event_payload,fe1_0.event_type,fe1_0.last_error,fe1_0.last_retry_at,fe1_0.max_retries,fe1_0.next_retry_at,fe1_0.partition_key,fe1_0.retry_count,fe1_0.status,fe1_0.topic from store_service.failed_events fe1_0 where fe1_0.status='PENDING' and fe1_0.next_retry_at<=? and fe1_0.retry_count<fe1_0.max_retries order by fe1_0.next_retry_at]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:277) ~[spring-orm-6.1.1.jar:6.1.1]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241) ~[spring-orm-6.1.1.jar:6.1.1]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550) ~[spring-orm-6.1.1.jar:6.1.1]
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-6.1.1.jar:6.1.1]
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335) ~[spring-tx-6.1.1.jar:6.1.1]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152) ~[spring-tx-6.1.1.jar:6.1.1]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.1.jar:6.1.1]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135) ~[spring-data-jpa-3.2.0.jar:3.2.0]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.1.jar:6.1.1]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97) ~[spring-aop-6.1.1.jar:6.1.1]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.1.jar:6.1.1]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:249) ~[spring-aop-6.1.1.jar:6.1.1]
	at jdk.proxy2/jdk.proxy2.$Proxy188.findEventsReadyForRetry(Unknown Source) ~[na:na]
	at com.inventory.management.store.infrastructure.service.EventResilienceService.processFailedEventsRetry(EventResilienceService.java:72) ~[classes/:na]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352) ~[spring-aop-6.1.1.jar:6.1.1]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.1.1.jar:6.1.1]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.1.1.jar:6.1.1]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765) ~[spring-aop-6.1.1.jar:6.1.1]
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123) ~[spring-tx-6.1.1.jar:6.1.1]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385) ~[spring-tx-6.1.1.jar:6.1.1]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.1.1.jar:6.1.1]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.1.jar:6.1.1]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765) ~[spring-aop-6.1.1.jar:6.1.1]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717) ~[spring-aop-6.1.1.jar:6.1.1]
	at com.inventory.management.store.infrastructure.service.EventResilienceService$$SpringCGLIB$$0.processFailedEventsRetry(<generated>) ~[classes/:na]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
	at org.springframework.scheduling.support.ScheduledMethodRunnable.runInternal(ScheduledMethodRunnable.java:130) ~[spring-context-6.1.1.jar:6.1.1]
	at org.springframework.scheduling.support.ScheduledMethodRunnable.lambda$run$2(ScheduledMethodRunnable.java:124) ~[spring-context-6.1.1.jar:6.1.1]
	at io.micrometer.observation.Observation.observe(Observation.java:499) ~[micrometer-observation-1.12.0.jar:1.12.0]
	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:124) ~[spring-context-6.1.1.jar:6.1.1]
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54) ~[spring-context-6.1.1.jar:6.1.1]
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572) ~[na:na]
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:358) ~[na:na]
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642) ~[na:na]
	at java.base/java.lang.Thread.run(Thread.java:1583) ~[na:na]
Caused by: org.hibernate.exception.SQLGrammarException: could not prepare statement [Table "failed_events" not found; SQL statement:
select fe1_0.id,fe1_0.created_at,fe1_0.event_id,fe1_0.event_payload,fe1_0.event_type,fe1_0.last_error,fe1_0.last_retry_at,fe1_0.max_retries,fe1_0.next_retry_at,fe1_0.partition_key,fe1_0.retry_count,fe1_0.status,fe1_0.topic from store_service.failed_events fe1_0 where fe1_0.status='PENDING' and fe1_0.next_retry_at<=? and fe1_0.retry_count<fe1_0.max_retries order by fe1_0.next_retry_at [42102-224]] [select fe1_0.id,fe1_0.created_at,fe1_0.event_id,fe1_0.event_payload,fe1_0.event_type,fe1_0.last_error,fe1_0.last_retry_at,fe1_0.max_retries,fe1_0.next_retry_at,fe1_0.partition_key,fe1_0.retry_count,fe1_0.status,fe1_0.topic from store_service.failed_events fe1_0 where fe1_0.status='PENDING' and fe1_0.next_retry_at<=? and fe1_0.retry_count<fe1_0.max_retries order by fe1_0.next_retry_at]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:66) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:187) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareQueryStatement(StatementPreparerImpl.java:152) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.lambda$list$0(JdbcSelectExecutorStandardImpl.java:102) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:227) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:164) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advanceNext(JdbcValuesResultSetImpl.java:218) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:98) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:19) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:66) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:200) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:361) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:168) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.list(JdbcSelectExecutorStandardImpl.java:93) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:31) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$0(ConcreteSqmSelectQueryPlan.java:109) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:305) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:246) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.query.Query.getResultList(Query.java:120) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129) ~[spring-data-jpa-3.2.0.jar:3.2.0]
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92) ~[spring-data-jpa-3.2.0.jar:3.2.0]
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149) ~[spring-data-jpa-3.2.0.jar:3.2.0]
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137) ~[spring-data-jpa-3.2.0.jar:3.2.0]
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170) ~[spring-data-commons-3.2.0.jar:3.2.0]
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158) ~[spring-data-commons-3.2.0.jar:3.2.0]
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164) ~[spring-data-commons-3.2.0.jar:3.2.0]
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143) ~[spring-data-commons-3.2.0.jar:3.2.0]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.1.jar:6.1.1]
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70) ~[spring-data-commons-3.2.0.jar:3.2.0]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.1.jar:6.1.1]
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123) ~[spring-tx-6.1.1.jar:6.1.1]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385) ~[spring-tx-6.1.1.jar:6.1.1]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.1.1.jar:6.1.1]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.1.jar:6.1.1]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137) ~[spring-tx-6.1.1.jar:6.1.1]
	... 34 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "failed_events" not found; SQL statement:
select fe1_0.id,fe1_0.created_at,fe1_0.event_id,fe1_0.event_payload,fe1_0.event_type,fe1_0.last_error,fe1_0.last_retry_at,fe1_0.max_retries,fe1_0.next_retry_at,fe1_0.partition_key,fe1_0.retry_count,fe1_0.status,fe1_0.topic from store_service.failed_events fe1_0 where fe1_0.status='PENDING' and fe1_0.next_retry_at<=? and fe1_0.retry_count<fe1_0.max_retries order by fe1_0.next_retry_at [42102-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.message.DbException.get(DbException.java:223) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.message.DbException.get(DbException.java:199) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.getTableOrViewNotFoundDbException(Parser.java:8064) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.getTableOrViewNotFoundDbException(Parser.java:8045) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.getTableOrViewNotFoundDbException(Parser.java:8029) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.readTableOrView(Parser.java:8024) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.readTablePrimary(Parser.java:1788) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.readTableReference(Parser.java:2268) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2718) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.parseSelect(Parser.java:2824) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.parseQueryPrimary(Parser.java:2708) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.parseQueryTerm(Parser.java:2564) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.parseQueryExpressionBody(Parser.java:2543) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.parseQueryExpressionBodyAndEndOfQuery(Parser.java:2536) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.parseQueryExpression(Parser.java:2529) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.parseQuery(Parser.java:2498) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.parsePrepared(Parser.java:627) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.parse(Parser.java:592) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.parse(Parser.java:564) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.command.Parser.prepareCommand(Parser.java:483) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:93) ~[h2-2.2.224.jar:2.2.224]
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:316) ~[h2-2.2.224.jar:2.2.224]
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:327) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$5.doPrepare(StatementPreparerImpl.java:150) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:177) ~[hibernate-core-6.3.1.Final.jar:6.3.1.Final]
	... 70 common frames omitted


@integration @integration @real-time-sync
Cenário: Sincronização de reserva de produto com sucesso                    &amp#27;[90m# features/integration/real-time-inventory-sync.feature:16&amp#27;[0m
2025-09-01T18:54:34.061-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:34.072-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:34.095-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:34.099-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : === Iniciando cenário de teste integrado: Sincronização de reserva de produto com sucesso ===
2025-09-01T18:54:34.099-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Preparação do cenário concluída
2025-09-01T18:54:34.099-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Preparando cenário de sincronização em tempo real: Sincronização de reserva de produto com sucesso
2025-09-01T18:54:34.101-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Setting JDBC Connection [HikariProxyConnection@1273051518 wrapping conn0: url=jdbc:h2:mem:testdb user=SA] read-only
2025-09-01T18:54:34.107-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select count(*) from store_service.products pe1_0
2025-09-01T18:54:34.109-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Resetting read-only flag of JDBC Connection [HikariProxyConnection@1273051518 wrapping conn0: url=jdbc:h2:mem:testdb user=SA]
2025-09-01T18:54:34.109-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : PostgreSQL conectado - produtos existentes: 0
2025-09-01T18:54:34.109-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Modo simplificado - Redis não verificado
2025-09-01T18:54:34.109-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Infraestrutura verificada e pronta para sincronização
2025-09-01T18:54:34.151-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : HTTP GET http://localhost:56137/store-service/actuator/health
2025-09-01T18:54:34.156-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Accept=[text/plain, application/json, application/*+json, */*]
2025-09-01T18:54:34.211-03:00  INFO 87518 --- [store-service-test] [o-auto-1-exec-1] [                                                 ] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-01T18:54:34.211-03:00  INFO 87518 --- [store-service-test] [o-auto-1-exec-1] [                                                 ] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2025-09-01T18:54:34.211-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-1] [                                                 ] o.s.web.servlet.DispatcherServlet        : Detected StandardServletMultipartResolver
2025-09-01T18:54:34.211-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-1] [                                                 ] o.s.web.servlet.DispatcherServlet        : Detected AcceptHeaderLocaleResolver
2025-09-01T18:54:34.211-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-1] [                                                 ] o.s.web.servlet.DispatcherServlet        : Detected FixedThemeResolver
2025-09-01T18:54:34.212-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-1] [                                                 ] o.s.web.servlet.DispatcherServlet        : Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@1a880ac9
2025-09-01T18:54:34.212-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-1] [                                                 ] o.s.web.servlet.DispatcherServlet        : Detected org.springframework.web.servlet.support.SessionFlashMapManager@28add270
2025-09-01T18:54:34.212-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-1] [                                                 ] o.s.web.servlet.DispatcherServlet        : enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-09-01T18:54:34.212-03:00  INFO 87518 --- [store-service-test] [o-auto-1-exec-1] [                                                 ] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2025-09-01T18:54:34.221-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-1] [68b6161a05074a862b84330eb9ac95ca-62389282812e2a74] o.s.web.servlet.DispatcherServlet        : GET "/store-service/actuator/health", parameters={}
2025-09-01T18:54:34.227-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-1] [68b6161a05074a862b84330eb9ac95ca-62389282812e2a74] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped to ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]
2025-09-01T18:54:34.229-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-1] [68b6161a05074a862b84330eb9ac95ca-62389282812e2a74] o.s.w.s.r.ResourceHttpRequestHandler     : Resource not found
2025-09-01T18:54:34.230-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-1] [68b6161a05074a862b84330eb9ac95ca-62389282812e2a74] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource store-service/actuator/health.]
2025-09-01T18:54:34.231-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-1] [68b6161a05074a862b84330eb9ac95ca-62389282812e2a74] o.s.web.servlet.DispatcherServlet        : Completed 404 NOT_FOUND
2025-09-01T18:54:34.235-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-1] [                                                 ] o.s.web.servlet.DispatcherServlet        : "ERROR" dispatch for GET "/error", parameters={}
2025-09-01T18:54:34.237-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-1] [                                                 ] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-09-01T18:54:34.251-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-1] [                                                 ] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [text/plain, application/json, application/*+json, */*] and supported [application/json, application/*+json]
2025-09-01T18:54:34.252-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-1] [                                                 ] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [{timestamp=Mon Sep 01 18:54:34 BRT 2025, status=404, error=Not Found, path=/store-service/actuator/h (truncated)...]
2025-09-01T18:54:34.281-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-1] [                                                 ] o.s.web.servlet.DispatcherServlet        : Exiting from "ERROR" dispatch, status 404
2025-09-01T18:54:34.282-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Response 404 NOT_FOUND
2025-09-01T18:54:34.283-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as "application/json"
  &amp#27;[31mDado &amp#27;[0m&amp#27;[31mque o sistema está rodando com infraestrutura completa&amp#27;[0m               &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta()&amp#27;[0m
      &amp#27;[31morg.opentest4j.AssertionFailedError: 
expected: 200 OK
 but was: 404 NOT_FOUND
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
	at com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta(IntegratedInventorySyncSteps.java:89)
	at ✽.que o sistema está rodando com infraestrutura completa(classpath:features/integration/real-time-inventory-sync.feature:9)
&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo banco de dados PostgreSQL está disponível&amp#27;[0m                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oBancoDeDadosPostgreSQLEstaDisponivel()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo cache Redis está disponível&amp#27;[0m                                           &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oCacheRedisEstaDisponivel()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo Kafka está disponível para mensageria&amp#27;[0m                                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oKafkaEstaDisponivelParaMensageria()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mexistem produtos no estoque central&amp#27;[0m                                     &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.existemProdutosNoEstoqueCentral()&amp#27;[0m
  &amp#27;[36mDado &amp#27;[0m&amp#27;[36mque existe um produto &amp#27;[0m&amp#27;[36m&amp#27;[1m"iPhone 15"&amp#27;[0m&amp#27;[36m com &amp#27;[0m&amp#27;[36m&amp#27;[1m10&amp#27;[0m&amp#27;[36m unidades no estoque central&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queExisteUmProdutoComUnidadesNoEstoqueCentral(java.lang.String,java.lang.Integer)&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo produto está disponível no cache Redis&amp#27;[0m                                &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oProdutoEstaDisponivelNoCacheRedis()&amp#27;[0m
  &amp#27;[36mQuando &amp#27;[0m&amp#27;[36meu reservo &amp#27;[0m&amp#27;[36m&amp#27;[1m3&amp#27;[0m&amp#27;[36m unidades do produto &amp#27;[0m&amp#27;[36m&amp#27;[1m"iPhone 15"&amp#27;[0m                       &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.euReservoUnidadesDoProduto(java.lang.Integer,java.lang.String)&amp#27;[0m
  &amp#27;[36mEntão &amp#27;[0m&amp#27;[36ma reserva deve ser processada com sucesso&amp#27;[0m                           &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.aReservaDeveSerProcessadaComSucesso()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo estoque deve ser atualizado para &amp#27;[0m&amp#27;[36m&amp#27;[1m7&amp#27;[0m&amp#27;[36m unidades no banco PostgreSQL&amp#27;[0m       &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oEstoqueDeveSerAtualizadoParaUnidadesNoBancoPostgreSQL(int)&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo cache Redis deve refletir o novo estoque de &amp#27;[0m&amp#27;[36m&amp#27;[1m7&amp#27;[0m&amp#27;[36m unidades&amp#27;[0m                &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oCacheRedisDeveRefletirONovoEstoqueDe(java.lang.Integer)&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36muma mensagem de atualização deve ser enviada via Kafka&amp#27;[0m                  &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.umaMensagemDeAtualizacaoDeveSerEnviadaViaKafka()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36ma mensagem deve ser consumida pelo sistema central&amp#27;[0m                      &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.aMensagemDeveSerConsumidaPeloSistemaCentral()&amp#27;[0m
2025-09-01T18:54:34.338-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Finalizando cenário de sincronização em tempo real: Sincronização de reserva de produto com sucesso
2025-09-01T18:54:34.338-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Setting JDBC Connection [HikariProxyConnection@643896115 wrapping conn0: url=jdbc:h2:mem:testdb user=SA] read-only
2025-09-01T18:54:34.339-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select count(*) from store_service.products pe1_0
2025-09-01T18:54:34.340-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Resetting read-only flag of JDBC Connection [HikariProxyConnection@643896115 wrapping conn0: url=jdbc:h2:mem:testdb user=SA]
2025-09-01T18:54:34.340-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Total de produtos após sincronização: 0
2025-09-01T18:54:34.340-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Validação de sincronização concluída
2025-09-01T18:54:34.340-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : === Finalizando cenário de teste integrado: Sincronização de reserva de produto com sucesso ===
2025-09-01T18:54:34.340-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Estatísticas do cenário 'Sincronização de reserva de produto com sucesso': 
2025-09-01T18:54:34.340-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Duração: 241ms
2025-09-01T18:54:34.341-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Status: FALHA
2025-09-01T18:54:34.341-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Tags: [@integration, @integration, @real-time-sync]
2025-09-01T18:54:34.342-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - scenario_start_time: 1756763674099
2025-09-01T18:54:34.342-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Modo simplificado - limpeza Redis ignorada
2025-09-01T18:54:34.342-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Cenário falhou: Sincronização de reserva de produto com sucesso
2025-09-01T18:54:34.342-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Informações sobre a falha:
2025-09-01T18:54:34.342-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Cenário: Sincronização de reserva de produto com sucesso
2025-09-01T18:54:34.342-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - URI: classpath:features/integration/real-time-inventory-sync.feature
2025-09-01T18:54:34.342-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Linha: 16
2025-09-01T18:54:34.342-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Dados do teste:
2025-09-01T18:54:34.342-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_duration_ms: 241
2025-09-01T18:54:34.342-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_start_time: 1756763674099
2025-09-01T18:54:34.342-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_name: Sincronização de reserva de produto com sucesso
2025-09-01T18:54:34.342-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:34.343-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:34.344-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
    <system-err><![CDATA[WARNING: A Java agent has been loaded dynamically (/Users/renan.lima/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar)
WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning
WARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more information
WARNING: Dynamic loading of agents will be disallowed by default in a future release
]]></system-err>
  </testcase>
  <testcase name="Sincronização de cancelamento de reserva" classname="Sincronização de Estoque em Tempo Real - Testes Integrados" time="0.028">
    <failure message="&#10;expected: 200 OK&#10; but was: 404 NOT_FOUND" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 

expected: 200 OK
 but was: 404 NOT_FOUND
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
	at com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta(IntegratedInventorySyncSteps.java:89)
	at ✽.que o sistema está rodando com infraestrutura completa(classpath:features/integration/real-time-inventory-sync.feature:9)
]]></failure>
    <system-out><![CDATA[2025-09-01T18:54:34.354-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:34.355-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@integration @integration @real-time-sync
Cenário: Sincronização de cancelamento de reserva                           &amp#27;[90m# features/integration/real-time-inventory-sync.feature:27&amp#27;[0m
2025-09-01T18:54:34.363-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:34.364-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:34.365-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:34.366-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : === Iniciando cenário de teste integrado: Sincronização de cancelamento de reserva ===
2025-09-01T18:54:34.366-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Preparação do cenário concluída
2025-09-01T18:54:34.366-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Preparando cenário de sincronização em tempo real: Sincronização de cancelamento de reserva
2025-09-01T18:54:34.366-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Setting JDBC Connection [HikariProxyConnection@673096822 wrapping conn0: url=jdbc:h2:mem:testdb user=SA] read-only
2025-09-01T18:54:34.366-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select count(*) from store_service.products pe1_0
2025-09-01T18:54:34.367-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Resetting read-only flag of JDBC Connection [HikariProxyConnection@673096822 wrapping conn0: url=jdbc:h2:mem:testdb user=SA]
2025-09-01T18:54:34.367-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : PostgreSQL conectado - produtos existentes: 0
2025-09-01T18:54:34.367-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Modo simplificado - Redis não verificado
2025-09-01T18:54:34.367-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Infraestrutura verificada e pronta para sincronização
2025-09-01T18:54:34.367-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : HTTP GET http://localhost:56137/store-service/actuator/health
2025-09-01T18:54:34.368-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Accept=[text/plain, application/json, application/*+json, */*]
2025-09-01T18:54:34.369-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-2] [68b6161aa0584cc8a24c1fa3f804a6a9-448d157cda1c881f] o.s.web.servlet.DispatcherServlet        : GET "/store-service/actuator/health", parameters={}
2025-09-01T18:54:34.370-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-2] [68b6161aa0584cc8a24c1fa3f804a6a9-448d157cda1c881f] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped to ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]
2025-09-01T18:54:34.370-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-2] [68b6161aa0584cc8a24c1fa3f804a6a9-448d157cda1c881f] o.s.w.s.r.ResourceHttpRequestHandler     : Resource not found
2025-09-01T18:54:34.370-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-2] [68b6161aa0584cc8a24c1fa3f804a6a9-448d157cda1c881f] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource store-service/actuator/health.]
2025-09-01T18:54:34.370-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-2] [68b6161aa0584cc8a24c1fa3f804a6a9-448d157cda1c881f] o.s.web.servlet.DispatcherServlet        : Completed 404 NOT_FOUND
2025-09-01T18:54:34.371-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-2] [                                                 ] o.s.web.servlet.DispatcherServlet        : "ERROR" dispatch for GET "/error", parameters={}
2025-09-01T18:54:34.371-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-2] [                                                 ] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-09-01T18:54:34.371-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-2] [                                                 ] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [text/plain, application/json, application/*+json, */*] and supported [application/json, application/*+json]
2025-09-01T18:54:34.372-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-2] [                                                 ] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [{timestamp=Mon Sep 01 18:54:34 BRT 2025, status=404, error=Not Found, path=/store-service/actuator/h (truncated)...]
2025-09-01T18:54:34.372-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-2] [                                                 ] o.s.web.servlet.DispatcherServlet        : Exiting from "ERROR" dispatch, status 404
2025-09-01T18:54:34.372-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Response 404 NOT_FOUND
2025-09-01T18:54:34.372-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as "application/json"
  &amp#27;[31mDado &amp#27;[0m&amp#27;[31mque o sistema está rodando com infraestrutura completa&amp#27;[0m               &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta()&amp#27;[0m
      &amp#27;[31morg.opentest4j.AssertionFailedError: 
expected: 200 OK
 but was: 404 NOT_FOUND
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
	at com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta(IntegratedInventorySyncSteps.java:89)
	at ✽.que o sistema está rodando com infraestrutura completa(classpath:features/integration/real-time-inventory-sync.feature:9)
&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo banco de dados PostgreSQL está disponível&amp#27;[0m                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oBancoDeDadosPostgreSQLEstaDisponivel()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo cache Redis está disponível&amp#27;[0m                                           &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oCacheRedisEstaDisponivel()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo Kafka está disponível para mensageria&amp#27;[0m                                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oKafkaEstaDisponivelParaMensageria()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mexistem produtos no estoque central&amp#27;[0m                                     &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.existemProdutosNoEstoqueCentral()&amp#27;[0m
  &amp#27;[36mDado &amp#27;[0m&amp#27;[36mque existe um produto &amp#27;[0m&amp#27;[36m&amp#27;[1m"Samsung Galaxy S24"&amp#27;[0m&amp#27;[36m com &amp#27;[0m&amp#27;[36m&amp#27;[1m5&amp#27;[0m&amp#27;[36m unidades no estoque&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queExisteUmProdutoComUnidadesNoEstoque(java.lang.String,java.lang.Integer)&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mexiste uma reserva ativa de &amp#27;[0m&amp#27;[36m&amp#27;[1m2&amp#27;[0m&amp#27;[36m unidades para este produto&amp#27;[0m                &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.existeUmaReservaAtivaDeuUnidadesParaEsteProduto(java.lang.Integer)&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo estoque disponível é de &amp#27;[0m&amp#27;[36m&amp#27;[1m3&amp#27;[0m&amp#27;[36m unidades&amp#27;[0m                                    &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oEstoqueDisponivelEdeUnidades(java.lang.Integer)&amp#27;[0m
  &amp#27;[36mQuando &amp#27;[0m&amp#27;[36meu cancelo a reserva de &amp#27;[0m&amp#27;[36m&amp#27;[1m2&amp#27;[0m&amp#27;[36m unidades&amp#27;[0m                                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.euCanceloAReservaDeUnidades(java.lang.Integer)&amp#27;[0m
  &amp#27;[36mEntão &amp#27;[0m&amp#27;[36ma reserva deve ser cancelada com sucesso&amp#27;[0m                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.aReservaDeveSerCanceladaComSucesso()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo estoque deve voltar para &amp#27;[0m&amp#27;[36m&amp#27;[1m5&amp#27;[0m&amp#27;[36m unidades no banco PostgreSQL&amp#27;[0m               &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oEstoqueDeveVoltarParaUnidadesNoBancoPostgreSQL(java.lang.Integer)&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo cache Redis deve ser atualizado para &amp#27;[0m&amp#27;[36m&amp#27;[1m5&amp#27;[0m&amp#27;[36m unidades disponíveis&amp#27;[0m           &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oCacheRedisDeveSerAtualizadoParaUnidadesDisponiveis(java.lang.Integer)&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36muma mensagem de cancelamento deve ser enviada via Kafka&amp#27;[0m                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.umaMensagemDeCancelamentoDeveSerEnviadaViaKafka()&amp#27;[0m
2025-09-01T18:54:34.375-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Finalizando cenário de sincronização em tempo real: Sincronização de cancelamento de reserva
2025-09-01T18:54:34.376-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Setting JDBC Connection [HikariProxyConnection@196265846 wrapping conn0: url=jdbc:h2:mem:testdb user=SA] read-only
2025-09-01T18:54:34.376-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select count(*) from store_service.products pe1_0
2025-09-01T18:54:34.376-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Resetting read-only flag of JDBC Connection [HikariProxyConnection@196265846 wrapping conn0: url=jdbc:h2:mem:testdb user=SA]
2025-09-01T18:54:34.377-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Total de produtos após sincronização: 0
2025-09-01T18:54:34.377-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Validação de sincronização concluída
2025-09-01T18:54:34.377-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : === Finalizando cenário de teste integrado: Sincronização de cancelamento de reserva ===
2025-09-01T18:54:34.377-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Estatísticas do cenário 'Sincronização de cancelamento de reserva': 
2025-09-01T18:54:34.377-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Duração: 11ms
2025-09-01T18:54:34.377-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Status: FALHA
2025-09-01T18:54:34.377-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Tags: [@integration, @integration, @real-time-sync]
2025-09-01T18:54:34.377-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - scenario_start_time: 1756763674366
2025-09-01T18:54:34.377-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Modo simplificado - limpeza Redis ignorada
2025-09-01T18:54:34.377-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Cenário falhou: Sincronização de cancelamento de reserva
2025-09-01T18:54:34.377-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Informações sobre a falha:
2025-09-01T18:54:34.377-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Cenário: Sincronização de cancelamento de reserva
2025-09-01T18:54:34.377-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - URI: classpath:features/integration/real-time-inventory-sync.feature
2025-09-01T18:54:34.377-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Linha: 27
2025-09-01T18:54:34.377-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Dados do teste:
2025-09-01T18:54:34.377-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_duration_ms: 11
2025-09-01T18:54:34.377-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_start_time: 1756763674366
2025-09-01T18:54:34.377-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_name: Sincronização de cancelamento de reserva
2025-09-01T18:54:34.377-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:34.378-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:34.379-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Recuperação automática após falha temporária do Redis" classname="Sincronização de Estoque em Tempo Real - Testes Integrados" time="0.027">
    <failure message="&#10;expected: 200 OK&#10; but was: 404 NOT_FOUND" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 

expected: 200 OK
 but was: 404 NOT_FOUND
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
	at com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta(IntegratedInventorySyncSteps.java:89)
	at ✽.que o sistema está rodando com infraestrutura completa(classpath:features/integration/real-time-inventory-sync.feature:9)
]]></failure>
    <system-out><![CDATA[2025-09-01T18:54:34.382-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:34.382-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@integration @integration @real-time-sync @error-handling
Cenário: Recuperação automática após falha temporária do Redis       &amp#27;[90m# features/integration/real-time-inventory-sync.feature:38&amp#27;[0m
2025-09-01T18:54:34.389-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:34.390-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:34.391-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:34.391-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : === Iniciando cenário de teste integrado: Recuperação automática após falha temporária do Redis ===
2025-09-01T18:54:34.391-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Preparação do cenário concluída
2025-09-01T18:54:34.392-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Preparando cenário de sincronização em tempo real: Recuperação automática após falha temporária do Redis
2025-09-01T18:54:34.392-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Setting JDBC Connection [HikariProxyConnection@1005465075 wrapping conn0: url=jdbc:h2:mem:testdb user=SA] read-only
2025-09-01T18:54:34.392-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select count(*) from store_service.products pe1_0
2025-09-01T18:54:34.392-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Resetting read-only flag of JDBC Connection [HikariProxyConnection@1005465075 wrapping conn0: url=jdbc:h2:mem:testdb user=SA]
2025-09-01T18:54:34.392-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : PostgreSQL conectado - produtos existentes: 0
2025-09-01T18:54:34.392-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Modo simplificado - Redis não verificado
2025-09-01T18:54:34.392-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Infraestrutura verificada e pronta para sincronização
2025-09-01T18:54:34.393-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Preparando cenário de tratamento de erros: Recuperação automática após falha temporária do Redis
2025-09-01T18:54:34.393-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Modo de tratamento de erros ativado
2025-09-01T18:54:34.393-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : HTTP GET http://localhost:56137/store-service/actuator/health
2025-09-01T18:54:34.394-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Accept=[text/plain, application/json, application/*+json, */*]
2025-09-01T18:54:34.395-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-3] [68b6161a612f1534b18df3a79936d015-70cac7ee9a30f9a0] o.s.web.servlet.DispatcherServlet        : GET "/store-service/actuator/health", parameters={}
2025-09-01T18:54:34.395-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-3] [68b6161a612f1534b18df3a79936d015-70cac7ee9a30f9a0] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped to ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]
2025-09-01T18:54:34.396-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-3] [68b6161a612f1534b18df3a79936d015-70cac7ee9a30f9a0] o.s.w.s.r.ResourceHttpRequestHandler     : Resource not found
2025-09-01T18:54:34.396-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-3] [68b6161a612f1534b18df3a79936d015-70cac7ee9a30f9a0] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource store-service/actuator/health.]
2025-09-01T18:54:34.396-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-3] [68b6161a612f1534b18df3a79936d015-70cac7ee9a30f9a0] o.s.web.servlet.DispatcherServlet        : Completed 404 NOT_FOUND
2025-09-01T18:54:34.396-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-3] [                                                 ] o.s.web.servlet.DispatcherServlet        : "ERROR" dispatch for GET "/error", parameters={}
2025-09-01T18:54:34.397-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-3] [                                                 ] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-09-01T18:54:34.397-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-3] [                                                 ] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [text/plain, application/json, application/*+json, */*] and supported [application/json, application/*+json]
2025-09-01T18:54:34.397-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-3] [                                                 ] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [{timestamp=Mon Sep 01 18:54:34 BRT 2025, status=404, error=Not Found, path=/store-service/actuator/h (truncated)...]
2025-09-01T18:54:34.398-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-3] [                                                 ] o.s.web.servlet.DispatcherServlet        : Exiting from "ERROR" dispatch, status 404
2025-09-01T18:54:34.398-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Response 404 NOT_FOUND
2025-09-01T18:54:34.398-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as "application/json"
  &amp#27;[31mDado &amp#27;[0m&amp#27;[31mque o sistema está rodando com infraestrutura completa&amp#27;[0m        &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta()&amp#27;[0m
      &amp#27;[31morg.opentest4j.AssertionFailedError: 
expected: 200 OK
 but was: 404 NOT_FOUND
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
	at com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta(IntegratedInventorySyncSteps.java:89)
	at ✽.que o sistema está rodando com infraestrutura completa(classpath:features/integration/real-time-inventory-sync.feature:9)
&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo banco de dados PostgreSQL está disponível&amp#27;[0m                      &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oBancoDeDadosPostgreSQLEstaDisponivel()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo cache Redis está disponível&amp#27;[0m                                    &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oCacheRedisEstaDisponivel()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo Kafka está disponível para mensageria&amp#27;[0m                          &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oKafkaEstaDisponivelParaMensageria()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mexistem produtos no estoque central&amp#27;[0m                              &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.existemProdutosNoEstoqueCentral()&amp#27;[0m
  &amp#27;[36mDado &amp#27;[0m&amp#27;[36mque existe um produto &amp#27;[0m&amp#27;[36m&amp#27;[1m"MacBook Pro"&amp#27;[0m&amp#27;[36m com &amp#27;[0m&amp#27;[36m&amp#27;[1m8&amp#27;[0m&amp#27;[36m unidades no estoque&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queExisteUmProdutoComUnidadesNoEstoque(java.lang.String,java.lang.Integer)&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo cache Redis está temporariamente indisponível&amp#27;[0m                  &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oCacheRedisEstaTemporariamenteIndisponivel()&amp#27;[0m
  &amp#27;[36mQuando &amp#27;[0m&amp#27;[36meu tento reservar &amp#27;[0m&amp#27;[36m&amp#27;[1m2&amp#27;[0m&amp#27;[36m unidades do produto &amp#27;[0m&amp#27;[36m&amp#27;[1m"MacBook Pro"&amp#27;[0m       &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.euTentoReservarUnidadesDoProduto(java.lang.Integer,java.lang.String)&amp#27;[0m
  &amp#27;[36mEntão &amp#27;[0m&amp#27;[36mo sistema deve consultar diretamente o banco PostgreSQL&amp#27;[0m      &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oSistemaDeveConsultarDiretamenteOBancoPostgreSQL()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36ma reserva deve ser processada mesmo sem cache&amp#27;[0m                    &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.aReservaDeveSerProcessadaMesmoSemCache()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo estoque deve ser atualizado no banco para &amp#27;[0m&amp#27;[36m&amp#27;[1m6&amp#27;[0m&amp#27;[36m unidades&amp#27;[0m           &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oEstoqueDeveSerAtualizadoNoBancoParaUnidades(java.lang.Integer)&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mquando o Redis voltar a estar disponível&amp#27;[0m                         &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.quandoORedisVoltarAEstarDisponivel()&amp#27;[0m
  &amp#27;[36mEntão &amp#27;[0m&amp#27;[36mo cache deve ser sincronizado automaticamente&amp#27;[0m                &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oCacheDeveSerSincronizadoAutomaticamente()&amp#27;[0m
2025-09-01T18:54:34.402-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Finalizando cenário de tratamento de erros: Recuperação automática após falha temporária do Redis
2025-09-01T18:54:34.402-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Setting JDBC Connection [HikariProxyConnection@825686816 wrapping conn0: url=jdbc:h2:mem:testdb user=SA] read-only
2025-09-01T18:54:34.402-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select count(*) from store_service.products pe1_0
2025-09-01T18:54:34.402-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Resetting read-only flag of JDBC Connection [HikariProxyConnection@825686816 wrapping conn0: url=jdbc:h2:mem:testdb user=SA]
2025-09-01T18:54:34.403-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Sistema se recuperou adequadamente - modo simplificado
2025-09-01T18:54:34.403-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Validação de recuperação do sistema concluída
2025-09-01T18:54:34.403-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Finalizando cenário de sincronização em tempo real: Recuperação automática após falha temporária do Redis
2025-09-01T18:54:34.403-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Setting JDBC Connection [HikariProxyConnection@1056273732 wrapping conn0: url=jdbc:h2:mem:testdb user=SA] read-only
2025-09-01T18:54:34.403-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select count(*) from store_service.products pe1_0
2025-09-01T18:54:34.403-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Resetting read-only flag of JDBC Connection [HikariProxyConnection@1056273732 wrapping conn0: url=jdbc:h2:mem:testdb user=SA]
2025-09-01T18:54:34.404-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Total de produtos após sincronização: 0
2025-09-01T18:54:34.404-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Validação de sincronização concluída
2025-09-01T18:54:34.404-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : === Finalizando cenário de teste integrado: Recuperação automática após falha temporária do Redis ===
2025-09-01T18:54:34.404-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Estatísticas do cenário 'Recuperação automática após falha temporária do Redis': 
2025-09-01T18:54:34.404-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Duração: 13ms
2025-09-01T18:54:34.404-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Status: FALHA
2025-09-01T18:54:34.404-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Tags: [@integration, @integration, @real-time-sync, @error-handling]
2025-09-01T18:54:34.404-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - scenario_start_time: 1756763674391
2025-09-01T18:54:34.404-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Modo simplificado - limpeza Redis ignorada
2025-09-01T18:54:34.404-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Cenário falhou: Recuperação automática após falha temporária do Redis
2025-09-01T18:54:34.404-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Informações sobre a falha:
2025-09-01T18:54:34.404-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Cenário: Recuperação automática após falha temporária do Redis
2025-09-01T18:54:34.404-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - URI: classpath:features/integration/real-time-inventory-sync.feature
2025-09-01T18:54:34.404-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Linha: 38
2025-09-01T18:54:34.404-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Dados do teste:
2025-09-01T18:54:34.404-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_duration_ms: 13
2025-09-01T18:54:34.404-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_start_time: 1756763674391
2025-09-01T18:54:34.404-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_name: Recuperação automática após falha temporária do Redis
2025-09-01T18:54:34.404-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:34.405-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:34.406-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Gerenciamento de concorrência em reservas simultâneas" classname="Sincronização de Estoque em Tempo Real - Testes Integrados" time="1.042">
    <failure message="&#10;expected: 200 OK&#10; but was: 404 NOT_FOUND" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 

expected: 200 OK
 but was: 404 NOT_FOUND
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
	at com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta(IntegratedInventorySyncSteps.java:89)
	at ✽.que o sistema está rodando com infraestrutura completa(classpath:features/integration/real-time-inventory-sync.feature:9)
]]></failure>
    <system-out><![CDATA[2025-09-01T18:54:34.409-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:34.410-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@integration @integration @real-time-sync @concurrency
Cenário: Gerenciamento de concorrência em reservas simultâneas                &amp#27;[90m# features/integration/real-time-inventory-sync.feature:49&amp#27;[0m
2025-09-01T18:54:34.417-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:34.418-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:34.418-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:34.419-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : === Iniciando cenário de teste integrado: Gerenciamento de concorrência em reservas simultâneas ===
2025-09-01T18:54:34.419-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Preparação do cenário concluída
2025-09-01T18:54:34.419-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Preparando cenário de sincronização em tempo real: Gerenciamento de concorrência em reservas simultâneas
2025-09-01T18:54:34.419-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Setting JDBC Connection [HikariProxyConnection@2015212535 wrapping conn0: url=jdbc:h2:mem:testdb user=SA] read-only
2025-09-01T18:54:34.419-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select count(*) from store_service.products pe1_0
2025-09-01T18:54:34.420-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Resetting read-only flag of JDBC Connection [HikariProxyConnection@2015212535 wrapping conn0: url=jdbc:h2:mem:testdb user=SA]
2025-09-01T18:54:34.420-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : PostgreSQL conectado - produtos existentes: 0
2025-09-01T18:54:34.420-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Modo simplificado - Redis não verificado
2025-09-01T18:54:34.420-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Infraestrutura verificada e pronta para sincronização
2025-09-01T18:54:34.420-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Preparando cenário de concorrência: Gerenciamento de concorrência em reservas simultâneas
2025-09-01T18:54:34.420-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Modo de concorrência ativado
2025-09-01T18:54:34.421-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : HTTP GET http://localhost:56137/store-service/actuator/health
2025-09-01T18:54:34.421-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Accept=[text/plain, application/json, application/*+json, */*]
2025-09-01T18:54:34.422-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-4] [68b6161aa24de32654b3ba1a215a6cd8-9189415f8e854963] o.s.web.servlet.DispatcherServlet        : GET "/store-service/actuator/health", parameters={}
2025-09-01T18:54:34.423-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-4] [68b6161aa24de32654b3ba1a215a6cd8-9189415f8e854963] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped to ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]
2025-09-01T18:54:34.423-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-4] [68b6161aa24de32654b3ba1a215a6cd8-9189415f8e854963] o.s.w.s.r.ResourceHttpRequestHandler     : Resource not found
2025-09-01T18:54:34.423-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-4] [68b6161aa24de32654b3ba1a215a6cd8-9189415f8e854963] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource store-service/actuator/health.]
2025-09-01T18:54:34.423-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-4] [68b6161aa24de32654b3ba1a215a6cd8-9189415f8e854963] o.s.web.servlet.DispatcherServlet        : Completed 404 NOT_FOUND
2025-09-01T18:54:34.424-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-4] [                                                 ] o.s.web.servlet.DispatcherServlet        : "ERROR" dispatch for GET "/error", parameters={}
2025-09-01T18:54:34.424-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-4] [                                                 ] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-09-01T18:54:34.424-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-4] [                                                 ] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [text/plain, application/json, application/*+json, */*] and supported [application/json, application/*+json]
2025-09-01T18:54:34.425-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-4] [                                                 ] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [{timestamp=Mon Sep 01 18:54:34 BRT 2025, status=404, error=Not Found, path=/store-service/actuator/h (truncated)...]
2025-09-01T18:54:34.425-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-4] [                                                 ] o.s.web.servlet.DispatcherServlet        : Exiting from "ERROR" dispatch, status 404
2025-09-01T18:54:34.425-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Response 404 NOT_FOUND
2025-09-01T18:54:34.425-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as "application/json"
  &amp#27;[31mDado &amp#27;[0m&amp#27;[31mque o sistema está rodando com infraestrutura completa&amp#27;[0m                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta()&amp#27;[0m
      &amp#27;[31morg.opentest4j.AssertionFailedError: 
expected: 200 OK
 but was: 404 NOT_FOUND
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
	at com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta(IntegratedInventorySyncSteps.java:89)
	at ✽.que o sistema está rodando com infraestrutura completa(classpath:features/integration/real-time-inventory-sync.feature:9)
&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo banco de dados PostgreSQL está disponível&amp#27;[0m                               &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oBancoDeDadosPostgreSQLEstaDisponivel()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo cache Redis está disponível&amp#27;[0m                                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oCacheRedisEstaDisponivel()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo Kafka está disponível para mensageria&amp#27;[0m                                   &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oKafkaEstaDisponivelParaMensageria()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mexistem produtos no estoque central&amp#27;[0m                                       &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.existemProdutosNoEstoqueCentral()&amp#27;[0m
  &amp#27;[36mDado &amp#27;[0m&amp#27;[36mque o sistema está rodando com infraestrutura completa&amp#27;[0m                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo banco de dados PostgreSQL está disponível&amp#27;[0m                               &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oBancoDeDadosPostgreSQLEstaDisponivel()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo cache Redis está disponível&amp#27;[0m                                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oCacheRedisEstaDisponivel()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo Kafka está disponível para mensageria&amp#27;[0m                                   &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oKafkaEstaDisponivelParaMensageria()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mexistem produtos no estoque central&amp#27;[0m                                       &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.existemProdutosNoEstoqueCentral()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mque existe um produto &amp#27;[0m&amp#27;[36m&amp#27;[1m"Nintendo Switch"&amp#27;[0m&amp#27;[36m com &amp#27;[0m&amp#27;[36m&amp#27;[1m3&amp#27;[0m&amp#27;[36m unidades no estoque central&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queExisteUmProdutoComUnidadesNoEstoqueCentral(java.lang.String,java.lang.Integer)&amp#27;[0m
  &amp#27;[36mQuando &amp#27;[0m&amp#27;[36m&amp#27;[0m&amp#27;[36m&amp#27;[1m5&amp#27;[0m&amp#27;[36m usuários tentam reservar &amp#27;[0m&amp#27;[36m&amp#27;[1m1&amp#27;[0m&amp#27;[36m unidade simultaneamente&amp#27;[0m                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ConcurrencySteps.usuariosTentamReservarUnidadeSimultaneamente(int,int)&amp#27;[0m
  &amp#27;[36mEntão &amp#27;[0m&amp#27;[36mapenas &amp#27;[0m&amp#27;[36m&amp#27;[1m3&amp#27;[0m&amp#27;[36m reservas devem ser aprovadas&amp#27;[0m                                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ConcurrencySteps.apenasReservasDevemSerAprovadas(java.lang.Integer)&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36m&amp#27;[0m&amp#27;[36m&amp#27;[1m2&amp#27;[0m&amp#27;[36m reservas devem ser rejeitadas por falta de estoque&amp#27;[0m                      &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ConcurrencySteps.reservasDevemSerRejeitadasPorFaltaDeEstoque(java.lang.Integer)&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo estoque final deve ser &amp#27;[0m&amp#27;[36m&amp#27;[1m0&amp#27;[0m&amp#27;[36m unidades no banco PostgreSQL&amp#27;[0m                   &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ConcurrencySteps.oEstoqueFinalDeveSerUnidadesNoBancoPostgreSQL(java.lang.Integer)&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo cache Redis deve refletir &amp#27;[0m&amp#27;[36m&amp#27;[1m0&amp#27;[0m&amp#27;[36m unidades disponíveis&amp#27;[0m                        &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ConcurrencySteps.oCacheRedisDeveRefletirUnidadesDisponiveis(java.lang.Integer)&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mas mensagens Kafka devem registrar todas as transações&amp#27;[0m                    &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ConcurrencySteps.asMensagensKafkaDevemRegistrarTodasAsTransacoes()&amp#27;[0m
2025-09-01T18:54:34.429-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Finalizando cenário de concorrência: Gerenciamento de concorrência em reservas simultâneas
2025-09-01T18:54:35.434-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Sistema estabilizado
2025-09-01T18:54:35.435-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Sistema estabilizado após teste de concorrência
2025-09-01T18:54:35.438-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Finalizando cenário de sincronização em tempo real: Gerenciamento de concorrência em reservas simultâneas
2025-09-01T18:54:35.439-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Setting JDBC Connection [HikariProxyConnection@2091522062 wrapping conn0: url=jdbc:h2:mem:testdb user=SA] read-only
2025-09-01T18:54:35.440-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select count(*) from store_service.products pe1_0
2025-09-01T18:54:35.442-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Resetting read-only flag of JDBC Connection [HikariProxyConnection@2091522062 wrapping conn0: url=jdbc:h2:mem:testdb user=SA]
2025-09-01T18:54:35.442-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Total de produtos após sincronização: 0
2025-09-01T18:54:35.442-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Validação de sincronização concluída
2025-09-01T18:54:35.442-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : === Finalizando cenário de teste integrado: Gerenciamento de concorrência em reservas simultâneas ===
2025-09-01T18:54:35.442-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Estatísticas do cenário 'Gerenciamento de concorrência em reservas simultâneas': 
2025-09-01T18:54:35.443-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Duração: 1023ms
2025-09-01T18:54:35.443-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Status: FALHA
2025-09-01T18:54:35.443-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Tags: [@integration, @integration, @real-time-sync, @concurrency]
2025-09-01T18:54:35.443-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - scenario_start_time: 1756763674419
2025-09-01T18:54:35.443-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Modo simplificado - limpeza Redis ignorada
2025-09-01T18:54:35.443-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Cenário falhou: Gerenciamento de concorrência em reservas simultâneas
2025-09-01T18:54:35.443-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Informações sobre a falha:
2025-09-01T18:54:35.443-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Cenário: Gerenciamento de concorrência em reservas simultâneas
2025-09-01T18:54:35.443-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - URI: classpath:features/integration/real-time-inventory-sync.feature
2025-09-01T18:54:35.443-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Linha: 49
2025-09-01T18:54:35.443-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Dados do teste:
2025-09-01T18:54:35.443-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_duration_ms: 1023
2025-09-01T18:54:35.443-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_start_time: 1756763674419
2025-09-01T18:54:35.443-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_name: Gerenciamento de concorrência em reservas simultâneas
2025-09-01T18:54:35.444-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.446-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.446-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Processamento em lote de atualizações de estoque" classname="Sincronização de Estoque em Tempo Real - Testes Integrados" time="0.035">
    <failure message="&#10;expected: 200 OK&#10; but was: 404 NOT_FOUND" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 

expected: 200 OK
 but was: 404 NOT_FOUND
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
	at com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta(IntegratedInventorySyncSteps.java:89)
	at ✽.que o sistema está rodando com infraestrutura completa(classpath:features/integration/real-time-inventory-sync.feature:9)
]]></failure>
    <system-out><![CDATA[2025-09-01T18:54:35.452-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.453-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@integration @integration @real-time-sync @batch-processing
Cenário: Processamento em lote de atualizações de estoque         &amp#27;[90m# features/integration/real-time-inventory-sync.feature:64&amp#27;[0m
2025-09-01T18:54:35.467-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.468-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.468-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.469-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : === Iniciando cenário de teste integrado: Processamento em lote de atualizações de estoque ===
2025-09-01T18:54:35.469-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Preparação do cenário concluída
2025-09-01T18:54:35.469-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Preparando cenário de sincronização em tempo real: Processamento em lote de atualizações de estoque
2025-09-01T18:54:35.469-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Setting JDBC Connection [HikariProxyConnection@757553067 wrapping conn0: url=jdbc:h2:mem:testdb user=SA] read-only
2025-09-01T18:54:35.470-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select count(*) from store_service.products pe1_0
2025-09-01T18:54:35.470-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Resetting read-only flag of JDBC Connection [HikariProxyConnection@757553067 wrapping conn0: url=jdbc:h2:mem:testdb user=SA]
2025-09-01T18:54:35.470-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : PostgreSQL conectado - produtos existentes: 0
2025-09-01T18:54:35.470-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Modo simplificado - Redis não verificado
2025-09-01T18:54:35.470-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Infraestrutura verificada e pronta para sincronização
2025-09-01T18:54:35.471-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : HTTP GET http://localhost:56137/store-service/actuator/health
2025-09-01T18:54:35.471-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Accept=[text/plain, application/json, application/*+json, */*]
2025-09-01T18:54:35.473-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-5] [68b6161b2f80789c045acb2ca831eb30-e171893d2151df8e] o.s.web.servlet.DispatcherServlet        : GET "/store-service/actuator/health", parameters={}
2025-09-01T18:54:35.473-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-5] [68b6161b2f80789c045acb2ca831eb30-e171893d2151df8e] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped to ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]
2025-09-01T18:54:35.474-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-5] [68b6161b2f80789c045acb2ca831eb30-e171893d2151df8e] o.s.w.s.r.ResourceHttpRequestHandler     : Resource not found
2025-09-01T18:54:35.474-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-5] [68b6161b2f80789c045acb2ca831eb30-e171893d2151df8e] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource store-service/actuator/health.]
2025-09-01T18:54:35.474-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-5] [68b6161b2f80789c045acb2ca831eb30-e171893d2151df8e] o.s.web.servlet.DispatcherServlet        : Completed 404 NOT_FOUND
2025-09-01T18:54:35.475-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-5] [                                                 ] o.s.web.servlet.DispatcherServlet        : "ERROR" dispatch for GET "/error", parameters={}
2025-09-01T18:54:35.475-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-5] [                                                 ] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-09-01T18:54:35.475-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-5] [                                                 ] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [text/plain, application/json, application/*+json, */*] and supported [application/json, application/*+json]
2025-09-01T18:54:35.475-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-5] [                                                 ] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [{timestamp=Mon Sep 01 18:54:35 BRT 2025, status=404, error=Not Found, path=/store-service/actuator/h (truncated)...]
2025-09-01T18:54:35.476-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-5] [                                                 ] o.s.web.servlet.DispatcherServlet        : Exiting from "ERROR" dispatch, status 404
2025-09-01T18:54:35.476-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Response 404 NOT_FOUND
2025-09-01T18:54:35.476-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as "application/json"
  &amp#27;[31mDado &amp#27;[0m&amp#27;[31mque o sistema está rodando com infraestrutura completa&amp#27;[0m     &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta()&amp#27;[0m
      &amp#27;[31morg.opentest4j.AssertionFailedError: 
expected: 200 OK
 but was: 404 NOT_FOUND
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
	at com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta(IntegratedInventorySyncSteps.java:89)
	at ✽.que o sistema está rodando com infraestrutura completa(classpath:features/integration/real-time-inventory-sync.feature:9)
&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo banco de dados PostgreSQL está disponível&amp#27;[0m                   &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oBancoDeDadosPostgreSQLEstaDisponivel()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo cache Redis está disponível&amp#27;[0m                                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oCacheRedisEstaDisponivel()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo Kafka está disponível para mensageria&amp#27;[0m                       &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oKafkaEstaDisponivelParaMensageria()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mexistem produtos no estoque central&amp#27;[0m                           &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.existemProdutosNoEstoqueCentral()&amp#27;[0m
  &amp#27;[36mDado &amp#27;[0m&amp#27;[36mque existem múltiplos produtos no estoque:&amp#27;[0m                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ConcurrencySteps.queExistemMultiplosProdutosNoEstoque(io.cucumber.datatable.DataTable)&amp#27;[0m
    | produto     | quantidade |
    | iPad Air    | 15         |
    | AirPods Pro | 25         |
    | Apple Watch | 20         |
  &amp#27;[36mQuando &amp#27;[0m&amp#27;[36meu processo um lote de reservas:&amp#27;[0m                         &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ConcurrencySteps.euProcessoUmLoteDeReservas(io.cucumber.datatable.DataTable)&amp#27;[0m
    | produto     | quantidade_reservada |
    | iPad Air    | 5                    |
    | AirPods Pro | 10                   |
    | Apple Watch | 8                    |
  &amp#27;[36mEntão &amp#27;[0m&amp#27;[36mtodas as reservas devem ser processadas em lote&amp#27;[0m           &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ConcurrencySteps.todasAsReservasDevemSerProcessadasEmLote()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mos estoques devem ser atualizados atomicamente no PostgreSQL:&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ConcurrencySteps.osEstoquesDevemSerAtualizadosAtomicamenteNoPostgreSQL(io.cucumber.datatable.DataTable)&amp#27;[0m
    | produto     | quantidade_final |
    | iPad Air    | 10               |
    | AirPods Pro | 15               |
    | Apple Watch | 12               |
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo cache Redis deve refletir todas as alterações&amp#27;[0m               &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ConcurrencySteps.oCacheRedisDeveRefletirTodasAsAlteracoes()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36muma mensagem Kafka deve ser enviada para cada atualização&amp#27;[0m     &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ConcurrencySteps.umaMensagemKafkaDeveSerEnviadaParaCadaAtualizacao()&amp#27;[0m
2025-09-01T18:54:35.481-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Finalizando cenário de sincronização em tempo real: Processamento em lote de atualizações de estoque
2025-09-01T18:54:35.481-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Setting JDBC Connection [HikariProxyConnection@1517789582 wrapping conn0: url=jdbc:h2:mem:testdb user=SA] read-only
2025-09-01T18:54:35.482-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select count(*) from store_service.products pe1_0
2025-09-01T18:54:35.482-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Resetting read-only flag of JDBC Connection [HikariProxyConnection@1517789582 wrapping conn0: url=jdbc:h2:mem:testdb user=SA]
2025-09-01T18:54:35.482-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Total de produtos após sincronização: 0
2025-09-01T18:54:35.482-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Validação de sincronização concluída
2025-09-01T18:54:35.482-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : === Finalizando cenário de teste integrado: Processamento em lote de atualizações de estoque ===
2025-09-01T18:54:35.482-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Estatísticas do cenário 'Processamento em lote de atualizações de estoque': 
2025-09-01T18:54:35.482-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Duração: 13ms
2025-09-01T18:54:35.482-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Status: FALHA
2025-09-01T18:54:35.483-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Tags: [@integration, @integration, @real-time-sync, @batch-processing]
2025-09-01T18:54:35.483-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - scenario_start_time: 1756763675469
2025-09-01T18:54:35.483-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Modo simplificado - limpeza Redis ignorada
2025-09-01T18:54:35.483-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Cenário falhou: Processamento em lote de atualizações de estoque
2025-09-01T18:54:35.483-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Informações sobre a falha:
2025-09-01T18:54:35.483-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Cenário: Processamento em lote de atualizações de estoque
2025-09-01T18:54:35.483-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - URI: classpath:features/integration/real-time-inventory-sync.feature
2025-09-01T18:54:35.483-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Linha: 64
2025-09-01T18:54:35.483-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Dados do teste:
2025-09-01T18:54:35.483-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_duration_ms: 13
2025-09-01T18:54:35.483-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_start_time: 1756763675469
2025-09-01T18:54:35.483-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_name: Processamento em lote de atualizações de estoque
2025-09-01T18:54:35.483-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.484-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.484-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Monitoramento de métricas em tempo real" classname="Sincronização de Estoque em Tempo Real - Testes Integrados" time="0.021">
    <failure message="&#10;expected: 200 OK&#10; but was: 404 NOT_FOUND" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 

expected: 200 OK
 but was: 404 NOT_FOUND
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
	at com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta(IntegratedInventorySyncSteps.java:89)
	at ✽.que o sistema está rodando com infraestrutura completa(classpath:features/integration/real-time-inventory-sync.feature:9)
]]></failure>
    <system-out><![CDATA[2025-09-01T18:54:35.487-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.488-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@integration @integration @real-time-sync @monitoring
Cenário: Monitoramento de métricas em tempo real                    &amp#27;[90m# features/integration/real-time-inventory-sync.feature:85&amp#27;[0m
2025-09-01T18:54:35.494-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.495-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.495-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.496-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : === Iniciando cenário de teste integrado: Monitoramento de métricas em tempo real ===
2025-09-01T18:54:35.496-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Preparação do cenário concluída
2025-09-01T18:54:35.496-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Preparando cenário de sincronização em tempo real: Monitoramento de métricas em tempo real
2025-09-01T18:54:35.496-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Setting JDBC Connection [HikariProxyConnection@1948140557 wrapping conn0: url=jdbc:h2:mem:testdb user=SA] read-only
2025-09-01T18:54:35.496-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select count(*) from store_service.products pe1_0
2025-09-01T18:54:35.497-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Resetting read-only flag of JDBC Connection [HikariProxyConnection@1948140557 wrapping conn0: url=jdbc:h2:mem:testdb user=SA]
2025-09-01T18:54:35.497-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : PostgreSQL conectado - produtos existentes: 0
2025-09-01T18:54:35.497-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Modo simplificado - Redis não verificado
2025-09-01T18:54:35.497-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Infraestrutura verificada e pronta para sincronização
2025-09-01T18:54:35.497-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : HTTP GET http://localhost:56137/store-service/actuator/health
2025-09-01T18:54:35.498-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Accept=[text/plain, application/json, application/*+json, */*]
2025-09-01T18:54:35.499-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-6] [68b6161ba9dbfb54d93aeddfe3032ff3-b9aa33dc3dbc85bf] o.s.web.servlet.DispatcherServlet        : GET "/store-service/actuator/health", parameters={}
2025-09-01T18:54:35.499-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-6] [68b6161ba9dbfb54d93aeddfe3032ff3-b9aa33dc3dbc85bf] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped to ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]
2025-09-01T18:54:35.500-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-6] [68b6161ba9dbfb54d93aeddfe3032ff3-b9aa33dc3dbc85bf] o.s.w.s.r.ResourceHttpRequestHandler     : Resource not found
2025-09-01T18:54:35.500-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-6] [68b6161ba9dbfb54d93aeddfe3032ff3-b9aa33dc3dbc85bf] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource store-service/actuator/health.]
2025-09-01T18:54:35.500-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-6] [68b6161ba9dbfb54d93aeddfe3032ff3-b9aa33dc3dbc85bf] o.s.web.servlet.DispatcherServlet        : Completed 404 NOT_FOUND
2025-09-01T18:54:35.500-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-6] [                                                 ] o.s.web.servlet.DispatcherServlet        : "ERROR" dispatch for GET "/error", parameters={}
2025-09-01T18:54:35.501-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-6] [                                                 ] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2025-09-01T18:54:35.501-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-6] [                                                 ] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Using 'application/json', given [text/plain, application/json, application/*+json, */*] and supported [application/json, application/*+json]
2025-09-01T18:54:35.501-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-6] [                                                 ] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Writing [{timestamp=Mon Sep 01 18:54:35 BRT 2025, status=404, error=Not Found, path=/store-service/actuator/h (truncated)...]
2025-09-01T18:54:35.502-03:00 DEBUG 87518 --- [store-service-test] [o-auto-1-exec-6] [                                                 ] o.s.web.servlet.DispatcherServlet        : Exiting from "ERROR" dispatch, status 404
2025-09-01T18:54:35.502-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Response 404 NOT_FOUND
2025-09-01T18:54:35.502-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as "application/json"
  &amp#27;[31mDado &amp#27;[0m&amp#27;[31mque o sistema está rodando com infraestrutura completa&amp#27;[0m       &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta()&amp#27;[0m
      &amp#27;[31morg.opentest4j.AssertionFailedError: 
expected: 200 OK
 but was: 404 NOT_FOUND
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
	at com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.queOSistemaEstaRodandoComInfraestruturaCompleta(IntegratedInventorySyncSteps.java:89)
	at ✽.que o sistema está rodando com infraestrutura completa(classpath:features/integration/real-time-inventory-sync.feature:9)
&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo banco de dados PostgreSQL está disponível&amp#27;[0m                     &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oBancoDeDadosPostgreSQLEstaDisponivel()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo cache Redis está disponível&amp#27;[0m                                   &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oCacheRedisEstaDisponivel()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mo Kafka está disponível para mensageria&amp#27;[0m                         &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.oKafkaEstaDisponivelParaMensageria()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mexistem produtos no estoque central&amp#27;[0m                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.IntegratedInventorySyncSteps.existemProdutosNoEstoqueCentral()&amp#27;[0m
  &amp#27;[36mDado &amp#27;[0m&amp#27;[36mque o sistema está coletando métricas via Prometheus&amp#27;[0m         &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.MonitoringSteps.queOSistemaEstaColetandoMetricasViaPrometheus()&amp#27;[0m
  &amp#27;[36mQuando &amp#27;[0m&amp#27;[36meu realizo várias operações de reserva e cancelamento&amp#27;[0m      &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.MonitoringSteps.euRealizoVariasOperacoesdeReservaeCancelamento()&amp#27;[0m
  &amp#27;[36mEntão &amp#27;[0m&amp#27;[36mas métricas devem ser atualizadas em tempo real&amp#27;[0m             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.MonitoringSteps.asMetricasDevemSerAtualizadasEmTempoReal()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mos endpoints de health check devem reportar status OK&amp#27;[0m           &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.MonitoringSteps.osEndpointsdeHealthCheckDevemReportarStatusOK()&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36mas métricas de latência do Kafka devem estar dentro dos limites&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.MonitoringSteps.asMetricasdeLatenciaDoKafkaDevemEstarDentroDosLimites()&amp#27;[0m
2025-09-01T18:54:35.504-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Finalizando cenário de sincronização em tempo real: Monitoramento de métricas em tempo real
2025-09-01T18:54:35.504-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Setting JDBC Connection [HikariProxyConnection@1320607645 wrapping conn0: url=jdbc:h2:mem:testdb user=SA] read-only
2025-09-01T18:54:35.504-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select count(*) from store_service.products pe1_0
2025-09-01T18:54:35.505-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] o.s.jdbc.datasource.DataSourceUtils      : Resetting read-only flag of JDBC Connection [HikariProxyConnection@1320607645 wrapping conn0: url=jdbc:h2:mem:testdb user=SA]
2025-09-01T18:54:35.505-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Total de produtos após sincronização: 0
2025-09-01T18:54:35.505-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Validação de sincronização concluída
2025-09-01T18:54:35.505-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : === Finalizando cenário de teste integrado: Monitoramento de métricas em tempo real ===
2025-09-01T18:54:35.505-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Estatísticas do cenário 'Monitoramento de métricas em tempo real': 
2025-09-01T18:54:35.505-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Duração: 9ms
2025-09-01T18:54:35.505-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Status: FALHA
2025-09-01T18:54:35.505-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Tags: [@integration, @integration, @real-time-sync, @monitoring]
2025-09-01T18:54:35.505-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - scenario_start_time: 1756763675496
2025-09-01T18:54:35.505-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Modo simplificado - limpeza Redis ignorada
2025-09-01T18:54:35.505-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Cenário falhou: Monitoramento de métricas em tempo real
2025-09-01T18:54:35.505-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     : Informações sobre a falha:
2025-09-01T18:54:35.505-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Cenário: Monitoramento de métricas em tempo real
2025-09-01T18:54:35.505-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - URI: classpath:features/integration/real-time-inventory-sync.feature
2025-09-01T18:54:35.505-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Linha: 85
2025-09-01T18:54:35.505-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :   - Dados do teste:
2025-09-01T18:54:35.505-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_duration_ms: 9
2025-09-01T18:54:35.505-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_start_time: 1756763675496
2025-09-01T18:54:35.505-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.c.hooks.IntegrationTestHooks     :     - scenario_name: Monitoramento de métricas em tempo real
2025-09-01T18:54:35.505-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.506-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.507-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Buscar produtos disponíveis na loja" classname="Gerenciamento de Inventário" time="0.14">
    <system-out><![CDATA[2025-09-01T18:54:35.510-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.511-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@inventory @busca-produtos
Cenário: Buscar produtos disponíveis na loja                            &amp#27;[90m# features/inventory-management.feature:15&amp#27;[0m
2025-09-01T18:54:35.517-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.518-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.519-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.519-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 📦 Preparando teste de inventário
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                           &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.524-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.543-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.546-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.547-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:35.547-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=4684924a-9eca-4b90-b902-03988841714e
2025-09-01T18:54:35.555-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.568-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=4684924a-9eca-4b90-b902-03988841714e
2025-09-01T18:54:35.568-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=4684924a-9eca-4b90-b902-03988841714e, SKU=PROD-001
2025-09-01T18:54:35.596-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.602-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=100
2025-09-01T18:54:35.602-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.603-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.605-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=4684924a-9eca-4b90-b902-03988841714e
2025-09-01T18:54:35.607-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=4684924a-9eca-4b90-b902-03988841714e
2025-09-01T18:54:35.609-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=100
2025-09-01T18:54:35.609-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=3f84c036-4eae-429e-9d47-ca00169a18ff, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:35.612-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m100&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                               &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.615-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=4684924a-9eca-4b90-b902-03988841714e
2025-09-01T18:54:35.616-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.617-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=4684924a-9eca-4b90-b902-03988841714e
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:35.620-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.usecase.SearchProductsUseCase  : Executando busca de produtos: SearchProductsRequest{storeId='STORE-001', productName='null'}
2025-09-01T18:54:35.620-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Buscando produtos disponíveis na loja: STORE-001
2025-09-01T18:54:35.620-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Listando produtos disponíveis da loja: STORE-001
2025-09-01T18:54:35.624-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.625-03:00 DEBUG 87518 --- [store-service-test] [         task-1] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=3f84c036-4eae-429e-9d47-ca00169a18ff
2025-09-01T18:54:35.627-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.store_id=? and pe1_0.active=true and (pe1_0.quantity-pe1_0.reserved_quantity)>0
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu busco produtos disponíveis na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m              &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.eu_busco_produtos_disponíveis_na_loja(java.lang.String)&amp#27;[0m
  &amp#27;[32mEntão &amp#27;[0m&amp#27;[32meu devo receber uma lista de produtos&amp#27;[0m                           &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.eu_devo_receber_uma_lista_de_produtos()&amp#27;[0m
  &amp#27;[32mE &amp#27;[0m&amp#27;[32ma lista deve conter o produto &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.a_lista_deve_conter_o_produto(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.637-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.638-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto deve ter &amp#27;[0m&amp#27;[32m&amp#27;[1m100&amp#27;[0m&amp#27;[32m unidades disponíveis&amp#27;[0m                         &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_deve_ter_unidades_disponíveis(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.642-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 📦 Limpeza após teste de inventário
2025-09-01T18:54:35.643-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.643-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.647-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:35.648-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Buscar produtos por nome" classname="Gerenciamento de Inventário" time="0.028">
    <failure message="&#10;Expecting actual not to be null" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: 

Expecting actual not to be null
	at com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.o_produto_deve_ter_nome(ProductSearchSteps.java:101)
	at com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.o_produto_deve_ter_o_nome(ProductSearchSteps.java:108)
	at ✽.o produto deve ter o nome "Produto Teste"(classpath:features/inventory-management.feature:26)
]]></failure>
    <system-out><![CDATA[2025-09-01T18:54:35.651-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.651-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration
2025-09-01T18:54:35.652-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-1
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer


@inventory @busca-por-nome
Cenário: Buscar produtos por nome                                       &amp#27;[90m# features/inventory-management.feature:22&amp#27;[0m
2025-09-01T18:54:35.657-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.658-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.659-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.659-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 📦 Preparando teste de inventário
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                           &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.659-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.660-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.660-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.661-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:35.661-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=13cbc9f4-dfed-4eb3-840a-8a3648e4e9bd
2025-09-01T18:54:35.661-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.661-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=13cbc9f4-dfed-4eb3-840a-8a3648e4e9bd
2025-09-01T18:54:35.661-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=13cbc9f4-dfed-4eb3-840a-8a3648e4e9bd, SKU=PROD-001
2025-09-01T18:54:35.662-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.663-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=100
2025-09-01T18:54:35.663-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.663-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.664-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=13cbc9f4-dfed-4eb3-840a-8a3648e4e9bd
2025-09-01T18:54:35.664-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=13cbc9f4-dfed-4eb3-840a-8a3648e4e9bd
2025-09-01T18:54:35.664-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=100
2025-09-01T18:54:35.664-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=72f4d1ee-f31b-45c0-a07c-4890108cd9f4, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:35.665-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m100&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                               &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.666-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.666-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=13cbc9f4-dfed-4eb3-840a-8a3648e4e9bd
2025-09-01T18:54:35.666-03:00 DEBUG 87518 --- [store-service-test] [         task-2] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=72f4d1ee-f31b-45c0-a07c-4890108cd9f4
2025-09-01T18:54:35.666-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.666-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=13cbc9f4-dfed-4eb3-840a-8a3648e4e9bd
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:35.667-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.usecase.SearchProductsUseCase  : Executando busca de produtos: SearchProductsRequest{storeId='STORE-001', productName='Produto Teste'}
2025-09-01T18:54:35.667-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Buscando produtos por nome: nome=Produto Teste, loja=STORE-001
2025-09-01T18:54:35.667-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produtos por nome: nome=Produto Teste, loja=STORE-001
2025-09-01T18:54:35.669-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.store_id=? and pe1_0.active=true and lower(pe1_0.name) like lower(('%'||?||'%')) escape ''
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu busco produtos com nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.eu_busco_produtos_com_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mEntão &amp#27;[0m&amp#27;[32meu devo receber uma lista de produtos&amp#27;[0m                           &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.eu_devo_receber_uma_lista_de_produtos()&amp#27;[0m
  &amp#27;[32mE &amp#27;[0m&amp#27;[32ma lista deve conter o produto &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.a_lista_deve_conter_o_produto(java.lang.String)&amp#27;[0m
  &amp#27;[31mE &amp#27;[0m&amp#27;[31mo produto deve ter o nome &amp#27;[0m&amp#27;[31m&amp#27;[1m"Produto Teste"&amp#27;[0m                           &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.o_produto_deve_ter_o_nome(java.lang.String)&amp#27;[0m
      &amp#27;[31mjava.lang.AssertionError: 
Expecting actual not to be null
	at com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.o_produto_deve_ter_nome(ProductSearchSteps.java:101)
	at com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.o_produto_deve_ter_o_nome(ProductSearchSteps.java:108)
	at ✽.o produto deve ter o nome "Produto Teste"(classpath:features/inventory-management.feature:26)
&amp#27;[0m
2025-09-01T18:54:35.674-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 📦 Limpeza após teste de inventário
2025-09-01T18:54:35.674-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.675-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.676-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:35.676-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Buscar produto específico por SKU" classname="Gerenciamento de Inventário" time="0.027">
    <system-out><![CDATA[2025-09-01T18:54:35.679-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-1] Instantiated an idempotent producer.
2025-09-01T18:54:35.679-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.680-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@inventory @busca-produto-especifico
Cenário: Buscar produto específico por SKU                              &amp#27;[90m# features/inventory-management.feature:29&amp#27;[0m
2025-09-01T18:54:35.685-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-1] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:35.685-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.685-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.685-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.685-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:35.686-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.686-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-1 unregistered
2025-09-01T18:54:35.686-03:00  WARN 87518 --- [store-service-test] [         task-1] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.686-03:00 ERROR 87518 --- [store-service-test] [         task-1] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.686-03:00 ERROR 87518 --- [store-service-test] [         task-1] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=3f84c036-4eae-429e-9d47-ca00169a18ff, erro=Failed to construct kafka producer
2025-09-01T18:54:35.686-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.686-03:00 ERROR 87518 --- [store-service-test] [         task-1] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=3f84c036-4eae-429e-9d47-ca00169a18ff, erro=Falha definitiva na publicação do evento
2025-09-01T18:54:35.686-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-2
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:35.687-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 📦 Preparando teste de inventário
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                           &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.687-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.687-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-2] Instantiated an idempotent producer.
2025-09-01T18:54:35.687-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-2] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:35.688-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.688-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.688-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.688-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:35.688-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-2 unregistered
2025-09-01T18:54:35.688-03:00  WARN 87518 --- [store-service-test] [         task-2] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.688-03:00 ERROR 87518 --- [store-service-test] [         task-2] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.688-03:00 ERROR 87518 --- [store-service-test] [         task-2] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=72f4d1ee-f31b-45c0-a07c-4890108cd9f4, erro=Failed to construct kafka producer
2025-09-01T18:54:35.688-03:00 ERROR 87518 --- [store-service-test] [         task-2] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=72f4d1ee-f31b-45c0-a07c-4890108cd9f4, erro=Falha definitiva na publicação do evento
2025-09-01T18:54:35.688-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.688-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:35.688-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=409bc1d7-8563-4b6c-8c81-3d1c2a5b9b0f
2025-09-01T18:54:35.688-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.689-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=409bc1d7-8563-4b6c-8c81-3d1c2a5b9b0f
2025-09-01T18:54:35.689-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=409bc1d7-8563-4b6c-8c81-3d1c2a5b9b0f, SKU=PROD-001
2025-09-01T18:54:35.689-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.690-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=100
2025-09-01T18:54:35.690-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.691-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.691-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=409bc1d7-8563-4b6c-8c81-3d1c2a5b9b0f
2025-09-01T18:54:35.692-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=409bc1d7-8563-4b6c-8c81-3d1c2a5b9b0f
2025-09-01T18:54:35.692-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=100
2025-09-01T18:54:35.692-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=5a36add0-8ee1-4c94-98d2-8a2b790c68d1, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:35.692-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
2025-09-01T18:54:35.693-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m100&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                               &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.693-03:00 DEBUG 87518 --- [store-service-test] [         task-3] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=5a36add0-8ee1-4c94-98d2-8a2b790c68d1
2025-09-01T18:54:35.693-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=409bc1d7-8563-4b6c-8c81-3d1c2a5b9b0f
2025-09-01T18:54:35.693-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-3
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:35.693-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.694-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-3] Instantiated an idempotent producer.
2025-09-01T18:54:35.694-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=409bc1d7-8563-4b6c-8c81-3d1c2a5b9b0f
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:35.694-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-3] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:35.694-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.694-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.694-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.usecase.GetProductUseCase      : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.694-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:35.694-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.694-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-3 unregistered
2025-09-01T18:54:35.694-03:00  WARN 87518 --- [store-service-test] [         task-3] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.695-03:00 ERROR 87518 --- [store-service-test] [         task-3] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.695-03:00 ERROR 87518 --- [store-service-test] [         task-3] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=5a36add0-8ee1-4c94-98d2-8a2b790c68d1, erro=Failed to construct kafka producer
2025-09-01T18:54:35.695-03:00 ERROR 87518 --- [store-service-test] [         task-3] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=5a36add0-8ee1-4c94-98d2-8a2b790c68d1, erro=Falha definitiva na publicação do evento
2025-09-01T18:54:35.695-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu busco o produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m      &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.eu_busco_o_produto_com_sku_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mEntão &amp#27;[0m&amp#27;[32meu devo receber os detalhes do produto&amp#27;[0m                          &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.eu_devo_receber_os_detalhes_do_produto()&amp#27;[0m
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto deve ter SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m                                   &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.o_produto_deve_ter_sku(java.lang.String)&amp#27;[0m
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto deve ter nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.o_produto_deve_ter_nome(java.lang.String)&amp#27;[0m
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto deve ter &amp#27;[0m&amp#27;[32m&amp#27;[1m100&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                          &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.o_produto_deve_ter_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.703-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 📦 Limpeza após teste de inventário
2025-09-01T18:54:35.703-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.703-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.704-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:35.705-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Buscar produto que não existe" classname="Gerenciamento de Inventário" time="0.021">
    <failure message="Mensagem não deve ser null ==&gt; expected: not &lt;null&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: Mensagem não deve ser null ==> expected: not <null>
	at com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_mensagem_deve_ser(ProductReservationSteps.java:255)
	at ✽.a mensagem deve ser "Produto não encontrado"(classpath:features/inventory-management.feature:40)
]]></failure>
    <system-out><![CDATA[2025-09-01T18:54:35.707-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.708-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@inventory @produto-nao-encontrado
Cenário: Buscar produto que não existe                                  &amp#27;[90m# features/inventory-management.feature:37&amp#27;[0m
2025-09-01T18:54:35.712-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.713-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.713-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.713-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 📦 Preparando teste de inventário
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                           &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.713-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.714-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.715-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.715-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:35.715-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=039339c7-a950-4033-b580-26044ca6fbdd
2025-09-01T18:54:35.715-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.716-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=039339c7-a950-4033-b580-26044ca6fbdd
2025-09-01T18:54:35.716-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=039339c7-a950-4033-b580-26044ca6fbdd, SKU=PROD-001
2025-09-01T18:54:35.716-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.717-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=100
2025-09-01T18:54:35.717-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.717-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.718-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=039339c7-a950-4033-b580-26044ca6fbdd
2025-09-01T18:54:35.718-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=039339c7-a950-4033-b580-26044ca6fbdd
2025-09-01T18:54:35.718-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=100
2025-09-01T18:54:35.718-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=ad444510-3f64-42b2-84eb-19f90bbfe1c4, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:35.719-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
2025-09-01T18:54:35.720-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.720-03:00 DEBUG 87518 --- [store-service-test] [         task-4] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=ad444510-3f64-42b2-84eb-19f90bbfe1c4
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m100&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                               &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.720-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-4
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:35.720-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=039339c7-a950-4033-b580-26044ca6fbdd
2025-09-01T18:54:35.721-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.721-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-4] Instantiated an idempotent producer.
2025-09-01T18:54:35.721-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-4] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:35.721-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.721-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.721-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:35.721-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-4 unregistered
2025-09-01T18:54:35.721-03:00  WARN 87518 --- [store-service-test] [         task-4] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.721-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=039339c7-a950-4033-b580-26044ca6fbdd
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:35.721-03:00 ERROR 87518 --- [store-service-test] [         task-4] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.721-03:00 ERROR 87518 --- [store-service-test] [         task-4] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=ad444510-3f64-42b2-84eb-19f90bbfe1c4, erro=Failed to construct kafka producer
2025-09-01T18:54:35.721-03:00 ERROR 87518 --- [store-service-test] [         task-4] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=ad444510-3f64-42b2-84eb-19f90bbfe1c4, erro=Falha definitiva na publicação do evento
2025-09-01T18:54:35.721-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.usecase.GetProductUseCase      : Buscando produto: SKU=PROD-999, Loja=STORE-001
2025-09-01T18:54:35.722-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-999, Loja=STORE-001
2025-09-01T18:54:35.722-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.723-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-999, Loja=STORE-001
2025-09-01T18:54:35.723-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.usecase.GetProductUseCase      : Produto não encontrado: SKU=PROD-999, Loja=STORE-001, Erro=Produto não encontrado: SKU=PROD-999, Loja=STORE-001
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu busco o produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-999"&amp#27;[0m&amp#27;[32m na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m      &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.eu_busco_o_produto_com_sku_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mEntão &amp#27;[0m&amp#27;[32meu devo receber um erro&amp#27;[0m                                         &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductSearchSteps.eu_devo_receber_um_erro()&amp#27;[0m
  &amp#27;[31mE &amp#27;[0m&amp#27;[31ma mensagem deve ser &amp#27;[0m&amp#27;[31m&amp#27;[1m"Produto não encontrado"&amp#27;[0m                        &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_mensagem_deve_ser(java.lang.String)&amp#27;[0m
      &amp#27;[31morg.opentest4j.AssertionFailedError: Mensagem não deve ser null ==> expected: not <null>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
	at org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:312)
	at com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_mensagem_deve_ser(ProductReservationSteps.java:255)
	at ✽.a mensagem deve ser "Produto não encontrado"(classpath:features/inventory-management.feature:40)
&amp#27;[0m
2025-09-01T18:54:35.724-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 📦 Limpeza após teste de inventário
2025-09-01T18:54:35.724-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.725-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.726-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:35.726-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Reservar produto com sucesso" classname="Reserva de Produtos" time="0.031">
    <system-out><![CDATA[2025-09-01T18:54:35.730-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.731-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@reservas @reserva-sucesso
Cenário: Reservar produto com sucesso                                     &amp#27;[90m# features/product-reservation.feature:15&amp#27;[0m
2025-09-01T18:54:35.736-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.737-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.737-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.738-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🔒 Preparando teste de reservas
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.738-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.739-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.739-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.739-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:35.743-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=90b9e774-16eb-46ec-a76d-3546d29f0470
2025-09-01T18:54:35.744-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.744-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=90b9e774-16eb-46ec-a76d-3546d29f0470
2025-09-01T18:54:35.744-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=90b9e774-16eb-46ec-a76d-3546d29f0470, SKU=PROD-001
2025-09-01T18:54:35.745-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m   &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.746-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=50
2025-09-01T18:54:35.746-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.746-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.747-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=90b9e774-16eb-46ec-a76d-3546d29f0470
2025-09-01T18:54:35.747-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=90b9e774-16eb-46ec-a76d-3546d29f0470
2025-09-01T18:54:35.747-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=50
2025-09-01T18:54:35.747-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=d848ad2a-81e4-48eb-a2a4-750ffd0844b6, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:35.747-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m50&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                                  &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.748-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=90b9e774-16eb-46ec-a76d-3546d29f0470
2025-09-01T18:54:35.748-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.748-03:00 DEBUG 87518 --- [store-service-test] [         task-5] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=d848ad2a-81e4-48eb-a2a4-750ffd0844b6
2025-09-01T18:54:35.749-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.749-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-5
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:35.749-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-5] Instantiated an idempotent producer.
2025-09-01T18:54:35.749-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=90b9e774-16eb-46ec-a76d-3546d29f0470
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                  &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:35.749-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-5] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:35.750-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.750-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.750-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:35.750-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-5 unregistered
2025-09-01T18:54:35.750-03:00  WARN 87518 --- [store-service-test] [         task-5] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.750-03:00 ERROR 87518 --- [store-service-test] [         task-5] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.750-03:00 ERROR 87518 --- [store-service-test] [         task-5] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=d848ad2a-81e4-48eb-a2a4-750ffd0844b6, erro=Failed to construct kafka producer
2025-09-01T18:54:35.750-03:00 ERROR 87518 --- [store-service-test] [         task-5] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=d848ad2a-81e4-48eb-a2a4-750ffd0844b6, erro=Falha definitiva na publicação do evento
2025-09-01T18:54:35.750-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.usecase.ReserveProductUseCase  : Executando reserva de produto: ReserveProductRequest{productSku='PROD-001', storeId='STORE-001', quantity=10, customerId='TEST_CUSTOMER_123', reservationDuration='PT30M'} | customerId=TEST_CUSTOMER_123 | duration=PT30M
2025-09-01T18:54:35.750-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Reservando produto: SKU=PROD-001, Loja=STORE-001, Quantidade=10
2025-09-01T18:54:35.750-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.751-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.751-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=90b9e774-16eb-46ec-a76d-3546d29f0470
2025-09-01T18:54:35.752-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=90b9e774-16eb-46ec-a76d-3546d29f0470
2025-09-01T18:54:35.752-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto reservado com sucesso: SKU=PROD-001, Reservado=10
2025-09-01T18:54:35.752-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=0e66be5c-0d05-40e6-bb3a-0518986d1921, tipo=RESERVE, produto=PROD-001
2025-09-01T18:54:35.752-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
2025-09-01T18:54:35.753-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.753-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.usecase.ReserveProductUseCase  : Produto reservado com sucesso: SKU=PROD-001, Quantidade reservada atual=10, Cliente=TEST_CUSTOMER_123, Duração=PT30M
2025-09-01T18:54:35.753-03:00 DEBUG 87518 --- [store-service-test] [         task-6] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=0e66be5c-0d05-40e6-bb3a-0518986d1921
2025-09-01T18:54:35.753-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.753-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-6
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:35.753-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-6] Instantiated an idempotent producer.
2025-09-01T18:54:35.753-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.754-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-6] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:35.754-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.754-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.754-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu reservo &amp#27;[0m&amp#27;[32m&amp#27;[1m10&amp#27;[0m&amp#27;[32m unidades do produto &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.eu_reservo_unidades_do_produto_na_loja(java.lang.Integer,java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.754-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-6 unregistered
2025-09-01T18:54:35.754-03:00  WARN 87518 --- [store-service-test] [         task-6] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.754-03:00 ERROR 87518 --- [store-service-test] [         task-6] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.754-03:00 ERROR 87518 --- [store-service-test] [         task-6] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=0e66be5c-0d05-40e6-bb3a-0518986d1921, erro=Failed to construct kafka producer
2025-09-01T18:54:35.754-03:00 ERROR 87518 --- [store-service-test] [         task-6] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=0e66be5c-0d05-40e6-bb3a-0518986d1921, erro=Falha definitiva na publicação do evento
  &amp#27;[32mEntão &amp#27;[0m&amp#27;[32ma reserva deve ser bem-sucedida&amp#27;[0m                                   &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_reserva_deve_ser_bem_sucedida()&amp#27;[0m
2025-09-01T18:54:35.754-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.755-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto deve ter &amp#27;[0m&amp#27;[32m&amp#27;[1m10&amp#27;[0m&amp#27;[32m unidades reservadas&amp#27;[0m                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_deve_ter_unidades_reservadas(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.755-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.756-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto deve ter &amp#27;[0m&amp#27;[32m&amp#27;[1m40&amp#27;[0m&amp#27;[32m unidades disponíveis&amp#27;[0m                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_deve_ter_unidades_disponíveis(java.lang.Integer)&amp#27;[0m
  &amp#27;[32mE &amp#27;[0m&amp#27;[32ma mensagem deve ser &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto reservado com sucesso"&amp#27;[0m                   &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_mensagem_deve_ser(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.757-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🔒 Limpeza após teste de reservas
2025-09-01T18:54:35.757-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.757-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.758-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:35.758-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Tentar reservar mais produtos do que disponível" classname="Reserva de Produtos" time="0.02">
    <system-out><![CDATA[2025-09-01T18:54:35.761-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.761-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@reservas @reserva-quantidade-insuficiente
Cenário: Tentar reservar mais produtos do que disponível                  &amp#27;[90m# features/product-reservation.feature:23&amp#27;[0m
2025-09-01T18:54:35.766-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.767-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.767-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.767-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🔒 Preparando teste de reservas
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.768-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.768-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.769-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.769-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:35.769-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=1d8dbc8e-42cb-4368-85a9-ac252a04dd45
2025-09-01T18:54:35.769-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.770-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=1d8dbc8e-42cb-4368-85a9-ac252a04dd45
2025-09-01T18:54:35.770-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=1d8dbc8e-42cb-4368-85a9-ac252a04dd45, SKU=PROD-001
2025-09-01T18:54:35.770-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m   &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.771-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=50
2025-09-01T18:54:35.771-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.771-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.772-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=1d8dbc8e-42cb-4368-85a9-ac252a04dd45
2025-09-01T18:54:35.772-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=1d8dbc8e-42cb-4368-85a9-ac252a04dd45
2025-09-01T18:54:35.772-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=50
2025-09-01T18:54:35.772-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=2d062c64-27dd-4baa-8273-69919f6849cc, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:35.772-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m50&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                                  &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.773-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=1d8dbc8e-42cb-4368-85a9-ac252a04dd45
2025-09-01T18:54:35.773-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.773-03:00 DEBUG 87518 --- [store-service-test] [         task-7] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=2d062c64-27dd-4baa-8273-69919f6849cc
2025-09-01T18:54:35.773-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-7
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:35.774-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.774-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-7] Instantiated an idempotent producer.
2025-09-01T18:54:35.774-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=1d8dbc8e-42cb-4368-85a9-ac252a04dd45
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                  &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:35.774-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-7] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:35.774-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.774-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.774-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:35.774-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.usecase.ReserveProductUseCase  : Executando reserva de produto: ReserveProductRequest{productSku='PROD-001', storeId='STORE-001', quantity=60, customerId='TEST_CUSTOMER_123', reservationDuration='PT30M'} | customerId=TEST_CUSTOMER_123 | duration=PT30M
2025-09-01T18:54:35.774-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-7 unregistered
2025-09-01T18:54:35.775-03:00  WARN 87518 --- [store-service-test] [         task-7] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.775-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Reservando produto: SKU=PROD-001, Loja=STORE-001, Quantidade=60
2025-09-01T18:54:35.775-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.775-03:00 ERROR 87518 --- [store-service-test] [         task-7] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.775-03:00 ERROR 87518 --- [store-service-test] [         task-7] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=2d062c64-27dd-4baa-8273-69919f6849cc, erro=Failed to construct kafka producer
2025-09-01T18:54:35.775-03:00 ERROR 87518 --- [store-service-test] [         task-7] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=2d062c64-27dd-4baa-8273-69919f6849cc, erro=Falha definitiva na publicação do evento
2025-09-01T18:54:35.775-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.776-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.usecase.ReserveProductUseCase  : Erro ao reservar produto: Quantidade insuficiente em estoque. Disponível: 50, Solicitado: 60
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu reservo &amp#27;[0m&amp#27;[32m&amp#27;[1m60&amp#27;[0m&amp#27;[32m unidades do produto &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.eu_reservo_unidades_do_produto_na_loja(java.lang.Integer,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mEntão &amp#27;[0m&amp#27;[32ma reserva deve falhar&amp#27;[0m                                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_reserva_deve_falhar()&amp#27;[0m
  &amp#27;[32mE &amp#27;[0m&amp#27;[32ma mensagem deve conter &amp#27;[0m&amp#27;[32m&amp#27;[1m"Estoque insuficiente"&amp#27;[0m                         &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_mensagem_deve_conter(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.776-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🔒 Limpeza após teste de reservas
2025-09-01T18:54:35.776-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.777-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.778-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:35.778-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Tentar reservar produto que não existe" classname="Reserva de Produtos" time="0.021">
    <system-out><![CDATA[2025-09-01T18:54:35.780-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.781-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@reservas @reservas @reserva-produto-inexistente
Cenário: Tentar reservar produto que não existe                          &amp#27;[90m# features/product-reservation.feature:29&amp#27;[0m
2025-09-01T18:54:35.787-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.788-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.788-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.788-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🔒 Preparando teste de reservas
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.789-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.790-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.790-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.790-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:35.790-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=e54638c7-8cef-4400-ae22-a08b817289cd
2025-09-01T18:54:35.791-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.791-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=e54638c7-8cef-4400-ae22-a08b817289cd
2025-09-01T18:54:35.791-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=e54638c7-8cef-4400-ae22-a08b817289cd, SKU=PROD-001
2025-09-01T18:54:35.791-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m  &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.792-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=50
2025-09-01T18:54:35.792-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.793-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.793-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=e54638c7-8cef-4400-ae22-a08b817289cd
2025-09-01T18:54:35.794-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=e54638c7-8cef-4400-ae22-a08b817289cd
2025-09-01T18:54:35.794-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=50
2025-09-01T18:54:35.794-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=24b4ec8e-c8a5-4b69-b15f-0f8a2769b0f3, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:35.794-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m50&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.795-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.795-03:00 DEBUG 87518 --- [store-service-test] [         task-8] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=24b4ec8e-c8a5-4b69-b15f-0f8a2769b0f3
2025-09-01T18:54:35.795-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=e54638c7-8cef-4400-ae22-a08b817289cd
2025-09-01T18:54:35.795-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-8
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:35.795-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.796-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=e54638c7-8cef-4400-ae22-a08b817289cd
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:35.796-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-8] Instantiated an idempotent producer.
2025-09-01T18:54:35.796-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.usecase.ReserveProductUseCase  : Executando reserva de produto: ReserveProductRequest{productSku='PROD-999', storeId='STORE-001', quantity=5, customerId='TEST_CUSTOMER_123', reservationDuration='PT30M'} | customerId=TEST_CUSTOMER_123 | duration=PT30M
2025-09-01T18:54:35.796-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-8] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:35.797-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Reservando produto: SKU=PROD-999, Loja=STORE-001, Quantidade=5
2025-09-01T18:54:35.797-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-999, Loja=STORE-001
2025-09-01T18:54:35.797-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.797-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.797-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:35.797-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-8 unregistered
2025-09-01T18:54:35.797-03:00  WARN 87518 --- [store-service-test] [         task-8] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.797-03:00 ERROR 87518 --- [store-service-test] [         task-8] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.797-03:00 ERROR 87518 --- [store-service-test] [         task-8] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=24b4ec8e-c8a5-4b69-b15f-0f8a2769b0f3, erro=Failed to construct kafka producer
2025-09-01T18:54:35.797-03:00 ERROR 87518 --- [store-service-test] [         task-8] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=24b4ec8e-c8a5-4b69-b15f-0f8a2769b0f3, erro=Falha definitiva na publicação do evento
2025-09-01T18:54:35.797-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.798-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-999, Loja=STORE-001
2025-09-01T18:54:35.798-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.usecase.ReserveProductUseCase  : Erro ao reservar produto: Produto não encontrado: SKU=PROD-999, Loja=STORE-001
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu reservo &amp#27;[0m&amp#27;[32m&amp#27;[1m5&amp#27;[0m&amp#27;[32m unidades do produto &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-999"&amp#27;[0m&amp#27;[32m na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.eu_reservo_unidades_do_produto_na_loja(java.lang.Integer,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mEntão &amp#27;[0m&amp#27;[32ma reserva deve falhar&amp#27;[0m                                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_reserva_deve_falhar()&amp#27;[0m
  &amp#27;[32mE &amp#27;[0m&amp#27;[32ma mensagem deve conter &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto não encontrado"&amp#27;[0m                      &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_mensagem_deve_conter(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.798-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🔒 Limpeza após teste de reservas
2025-09-01T18:54:35.798-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.799-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.800-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:35.800-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Tentar reservar produto inativo" classname="Reserva de Produtos" time="0.025">
    <failure message="&#10;Expecting value to be false but was true" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 

Expecting value to be false but was true
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
	at com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_reserva_deve_falhar(ProductReservationSteps.java:187)
	at ✽.a reserva deve falhar(classpath:features/product-reservation.feature:50)
]]></failure>
    <system-out><![CDATA[2025-09-01T18:54:35.854-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.855-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@reservas @reserva-produto-inativo
Cenário: Tentar reservar produto inativo                                 &amp#27;[90m# features/product-reservation.feature:47&amp#27;[0m
2025-09-01T18:54:35.859-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.860-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.860-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.860-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🔒 Preparando teste de reservas
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.861-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.861-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.862-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.862-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:35.862-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=01451ce9-b575-41dc-8906-4b57e9d46525
2025-09-01T18:54:35.862-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.862-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=01451ce9-b575-41dc-8906-4b57e9d46525
2025-09-01T18:54:35.862-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=01451ce9-b575-41dc-8906-4b57e9d46525, SKU=PROD-001
2025-09-01T18:54:35.863-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m  &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.863-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=50
2025-09-01T18:54:35.863-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.864-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.864-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=01451ce9-b575-41dc-8906-4b57e9d46525
2025-09-01T18:54:35.865-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=01451ce9-b575-41dc-8906-4b57e9d46525
2025-09-01T18:54:35.865-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=50
2025-09-01T18:54:35.865-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=d3de1290-b02b-432d-b7a0-a05c71b6646a, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:35.865-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m50&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.866-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.866-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=01451ce9-b575-41dc-8906-4b57e9d46525
2025-09-01T18:54:35.866-03:00 DEBUG 87518 --- [store-service-test] [         task-4] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=d3de1290-b02b-432d-b7a0-a05c71b6646a
2025-09-01T18:54:35.866-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-12
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:35.866-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.866-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-12] Instantiated an idempotent producer.
2025-09-01T18:54:35.866-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=01451ce9-b575-41dc-8906-4b57e9d46525
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:35.866-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-12] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:35.867-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=01451ce9-b575-41dc-8906-4b57e9d46525
2025-09-01T18:54:35.867-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.867-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.867-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:35.867-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-12 unregistered
2025-09-01T18:54:35.867-03:00  WARN 87518 --- [store-service-test] [         task-4] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.867-03:00 ERROR 87518 --- [store-service-test] [         task-4] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.867-03:00 ERROR 87518 --- [store-service-test] [         task-4] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=d3de1290-b02b-432d-b7a0-a05c71b6646a, erro=Failed to construct kafka producer
2025-09-01T18:54:35.867-03:00 ERROR 87518 --- [store-service-test] [         task-4] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=d3de1290-b02b-432d-b7a0-a05c71b6646a, erro=Falha definitiva na publicação do evento
2025-09-01T18:54:35.867-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.867-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
2025-09-01T18:54:35.868-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=01451ce9-b575-41dc-8906-4b57e9d46525
2025-09-01T18:54:35.868-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.869-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.869-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=01451ce9-b575-41dc-8906-4b57e9d46525
2025-09-01T18:54:35.869-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.870-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=01451ce9-b575-41dc-8906-4b57e9d46525
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque o produto &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m está inativo&amp#27;[0m                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_o_produto_está_inativo(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.870-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.usecase.ReserveProductUseCase  : Executando reserva de produto: ReserveProductRequest{productSku='PROD-001', storeId='STORE-001', quantity=5, customerId='TEST_CUSTOMER_123', reservationDuration='PT30M'} | customerId=TEST_CUSTOMER_123 | duration=PT30M
2025-09-01T18:54:35.870-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Reservando produto: SKU=PROD-001, Loja=STORE-001, Quantidade=5
2025-09-01T18:54:35.870-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.871-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.871-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=01451ce9-b575-41dc-8906-4b57e9d46525
2025-09-01T18:54:35.871-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=01451ce9-b575-41dc-8906-4b57e9d46525
2025-09-01T18:54:35.871-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto reservado com sucesso: SKU=PROD-001, Reservado=5
2025-09-01T18:54:35.871-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=383c5c6f-06ab-417b-8980-8ea36732e83b, tipo=RESERVE, produto=PROD-001
2025-09-01T18:54:35.872-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
2025-09-01T18:54:35.872-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.usecase.ReserveProductUseCase  : Produto reservado com sucesso: SKU=PROD-001, Quantidade reservada atual=5, Cliente=TEST_CUSTOMER_123, Duração=PT30M
2025-09-01T18:54:35.872-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.872-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.872-03:00 DEBUG 87518 --- [store-service-test] [         task-5] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=383c5c6f-06ab-417b-8980-8ea36732e83b
2025-09-01T18:54:35.872-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-13
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:35.873-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.873-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-13] Instantiated an idempotent producer.
2025-09-01T18:54:35.873-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-13] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:35.873-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.873-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.873-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu reservo &amp#27;[0m&amp#27;[32m&amp#27;[1m5&amp#27;[0m&amp#27;[32m unidades do produto &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.eu_reservo_unidades_do_produto_na_loja(java.lang.Integer,java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.873-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-13 unregistered
2025-09-01T18:54:35.873-03:00  WARN 87518 --- [store-service-test] [         task-5] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.873-03:00 ERROR 87518 --- [store-service-test] [         task-5] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.873-03:00 ERROR 87518 --- [store-service-test] [         task-5] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=383c5c6f-06ab-417b-8980-8ea36732e83b, erro=Failed to construct kafka producer
2025-09-01T18:54:35.873-03:00 ERROR 87518 --- [store-service-test] [         task-5] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=383c5c6f-06ab-417b-8980-8ea36732e83b, erro=Falha definitiva na publicação do evento
  &amp#27;[31mEntão &amp#27;[0m&amp#27;[31ma reserva deve falhar&amp#27;[0m                                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_reserva_deve_falhar()&amp#27;[0m
      &amp#27;[31morg.opentest4j.AssertionFailedError: 
Expecting value to be false but was true
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
	at com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_reserva_deve_falhar(ProductReservationSteps.java:187)
	at ✽.a reserva deve falhar(classpath:features/product-reservation.feature:50)
&amp#27;[0m
  &amp#27;[36mE &amp#27;[0m&amp#27;[36ma mensagem deve conter &amp#27;[0m&amp#27;[36m&amp#27;[1m"Produto não está ativo"&amp#27;[0m                      &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_mensagem_deve_conter(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.875-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🔒 Limpeza após teste de reservas
2025-09-01T18:54:35.875-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.876-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.877-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:35.877-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Example #1.1" classname="Exemplos" time="0.018">
    <system-out><![CDATA[2025-09-01T18:54:35.803-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.803-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@reservas @reserva-quantidade-invalida
Esquema do Cenário: Tentar reservar com quantidade inválida              &amp#27;[90m# features/product-reservation.feature:42&amp#27;[0m
2025-09-01T18:54:35.808-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.808-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.809-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.809-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🔒 Preparando teste de reservas
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.809-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.810-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.811-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.811-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:35.811-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=cbf594c2-d6ff-43a0-9daa-a5a08e146913
2025-09-01T18:54:35.811-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.812-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=cbf594c2-d6ff-43a0-9daa-a5a08e146913
2025-09-01T18:54:35.812-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=cbf594c2-d6ff-43a0-9daa-a5a08e146913, SKU=PROD-001
2025-09-01T18:54:35.812-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m  &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.813-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=50
2025-09-01T18:54:35.813-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.814-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.815-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=cbf594c2-d6ff-43a0-9daa-a5a08e146913
2025-09-01T18:54:35.815-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=cbf594c2-d6ff-43a0-9daa-a5a08e146913
2025-09-01T18:54:35.815-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=50
2025-09-01T18:54:35.815-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=5886d9c1-2ffe-402d-914c-8bbb194d40e2, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:35.815-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m50&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.816-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.816-03:00 DEBUG 87518 --- [store-service-test] [         task-1] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=5886d9c1-2ffe-402d-914c-8bbb194d40e2
2025-09-01T18:54:35.816-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=cbf594c2-d6ff-43a0-9daa-a5a08e146913
2025-09-01T18:54:35.816-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.816-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-9
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:35.817-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-9] Instantiated an idempotent producer.
2025-09-01T18:54:35.817-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=cbf594c2-d6ff-43a0-9daa-a5a08e146913
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:35.817-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-9] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:35.817-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.usecase.ReserveProductUseCase  : Executando reserva de produto: ReserveProductRequest{productSku='PROD-001', storeId='STORE-001', quantity=0, customerId='TEST_CUSTOMER_123', reservationDuration='PT30M'} | customerId=TEST_CUSTOMER_123 | duration=PT30M
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu reservo &amp#27;[0m&amp#27;[32m&amp#27;[1m0&amp#27;[0m&amp#27;[32m unidades do produto &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.eu_reservo_unidades_do_produto_na_loja(java.lang.Integer,java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.817-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.817-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.817-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
  &amp#27;[32mEntão &amp#27;[0m&amp#27;[32ma reserva deve falhar&amp#27;[0m                                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_reserva_deve_falhar()&amp#27;[0m
2025-09-01T18:54:35.817-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-9 unregistered
2025-09-01T18:54:35.817-03:00  WARN 87518 --- [store-service-test] [         task-1] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.817-03:00 ERROR 87518 --- [store-service-test] [         task-1] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.817-03:00 ERROR 87518 --- [store-service-test] [         task-1] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=5886d9c1-2ffe-402d-914c-8bbb194d40e2, erro=Failed to construct kafka producer
  &amp#27;[32mE &amp#27;[0m&amp#27;[32ma mensagem deve conter &amp#27;[0m&amp#27;[32m&amp#27;[1m"Quantidade deve ser maior que zero"&amp#27;[0m          &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_mensagem_deve_conter(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.817-03:00 ERROR 87518 --- [store-service-test] [         task-1] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=5886d9c1-2ffe-402d-914c-8bbb194d40e2, erro=Falha definitiva na publicação do evento
2025-09-01T18:54:35.817-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🔒 Limpeza após teste de reservas
2025-09-01T18:54:35.817-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.818-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.819-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:35.819-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Example #1.1" classname="Exemplos" time="0.02">
    <system-out><![CDATA[2025-09-01T18:54:35.962-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.963-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@cancelamento-reservas @cancelamento-quantidade-invalida
Esquema do Cenário: Tentar cancelar reserva com quantidade inválida                 &amp#27;[90m# features/reservation-cancellation.feature:43&amp#27;[0m
2025-09-01T18:54:35.967-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.968-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.968-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.968-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : ❌ Preparando teste de cancelamento
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                                       &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.969-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.969-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.970-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.970-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:35.970-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=e10d5456-40cd-465e-8256-769570e2e422
2025-09-01T18:54:35.970-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.971-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=e10d5456-40cd-465e-8256-769570e2e422
2025-09-01T18:54:35.971-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=e10d5456-40cd-465e-8256-769570e2e422, SKU=PROD-001
2025-09-01T18:54:35.971-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.972-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=80
2025-09-01T18:54:35.972-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.972-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.973-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=e10d5456-40cd-465e-8256-769570e2e422
2025-09-01T18:54:35.973-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=e10d5456-40cd-465e-8256-769570e2e422
2025-09-01T18:54:35.973-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=80
2025-09-01T18:54:35.973-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=2603e2b2-32b9-4995-873e-6ac198133990, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:35.973-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m80&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.974-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.974-03:00 DEBUG 87518 --- [store-service-test] [         task-2] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=2603e2b2-32b9-4995-873e-6ac198133990
2025-09-01T18:54:35.974-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-18
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

DEBUG: Configurando 20 unidades reservadas para produto PROD-001
2025-09-01T18:54:35.974-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.975-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-18] Instantiated an idempotent producer.
2025-09-01T18:54:35.975-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-18] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:35.975-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.975-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.975-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:35.975-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.975-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-18 unregistered
2025-09-01T18:54:35.975-03:00  WARN 87518 --- [store-service-test] [         task-2] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.975-03:00 ERROR 87518 --- [store-service-test] [         task-2] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.975-03:00 ERROR 87518 --- [store-service-test] [         task-2] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=2603e2b2-32b9-4995-873e-6ac198133990, erro=Failed to construct kafka producer
2025-09-01T18:54:35.975-03:00 ERROR 87518 --- [store-service-test] [         task-2] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=2603e2b2-32b9-4995-873e-6ac198133990, erro=Falha definitiva na publicação do evento
2025-09-01T18:54:35.976-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=e10d5456-40cd-465e-8256-769570e2e422
2025-09-01T18:54:35.976-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.976-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
2025-09-01T18:54:35.977-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=e10d5456-40cd-465e-8256-769570e2e422
DEBUG: Produto salvo com reservas - Estoque: 80, Reservado: 20, Disponível: 80
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m20&amp#27;[0m&amp#27;[32m unidades reservadas&amp#27;[0m                                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.oProdutoTemUnidadesReservadas(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.977-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=e10d5456-40cd-465e-8256-769570e2e422
2025-09-01T18:54:35.977-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.978-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=e10d5456-40cd-465e-8256-769570e2e422
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:35.978-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.979-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.979-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.u.CancelReservationUseCase     : Executando cancelamento de reserva: SKU=PROD-001, Loja=STORE-001, Quantidade=0
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu cancelo &amp#27;[0m&amp#27;[32m&amp#27;[1m0&amp#27;[0m&amp#27;[32m unidades da reserva do produto &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.euCanceloUnidadesDaReservaDoProdutoNaLoja(java.lang.Integer,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mEntão &amp#27;[0m&amp#27;[32mo cancelamento deve falhar&amp#27;[0m                                                  &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.oCancelamentoDeveFalhar()&amp#27;[0m
  &amp#27;[32mE &amp#27;[0m&amp#27;[32ma mensagem deve conter &amp#27;[0m&amp#27;[32m&amp#27;[1m"Quantidade deve ser maior que zero"&amp#27;[0m                     &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_mensagem_deve_conter(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.980-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : ❌ Limpeza após teste de cancelamento
2025-09-01T18:54:35.980-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.980-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.981-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:35.981-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Example #1.2" classname="Exemplos" time="0.015">
    <system-out><![CDATA[2025-09-01T18:54:35.821-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.822-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@reservas @reserva-quantidade-invalida
Esquema do Cenário: Tentar reservar com quantidade inválida               &amp#27;[90m# features/product-reservation.feature:43&amp#27;[0m
2025-09-01T18:54:35.826-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.826-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.827-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.827-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🔒 Preparando teste de reservas
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.827-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.828-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.828-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.828-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:35.828-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=4caf6858-0ef3-4bca-bddd-c18f6b73643a
2025-09-01T18:54:35.828-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.829-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=4caf6858-0ef3-4bca-bddd-c18f6b73643a
2025-09-01T18:54:35.829-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=4caf6858-0ef3-4bca-bddd-c18f6b73643a, SKU=PROD-001
2025-09-01T18:54:35.829-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m   &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.830-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=50
2025-09-01T18:54:35.830-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.830-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.831-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=4caf6858-0ef3-4bca-bddd-c18f6b73643a
2025-09-01T18:54:35.831-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=4caf6858-0ef3-4bca-bddd-c18f6b73643a
2025-09-01T18:54:35.831-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=50
2025-09-01T18:54:35.831-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=72c96b38-1afd-447a-931b-9a0214be74df, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:35.831-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m50&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                                  &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.832-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=4caf6858-0ef3-4bca-bddd-c18f6b73643a
2025-09-01T18:54:35.832-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.832-03:00 DEBUG 87518 --- [store-service-test] [         task-2] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=72c96b38-1afd-447a-931b-9a0214be74df
2025-09-01T18:54:35.832-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.832-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-10
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:35.833-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-10] Instantiated an idempotent producer.
2025-09-01T18:54:35.833-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=4caf6858-0ef3-4bca-bddd-c18f6b73643a
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                  &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:35.833-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.usecase.ReserveProductUseCase  : Executando reserva de produto: ReserveProductRequest{productSku='PROD-001', storeId='STORE-001', quantity=-1, customerId='TEST_CUSTOMER_123', reservationDuration='PT30M'} | customerId=TEST_CUSTOMER_123 | duration=PT30M
2025-09-01T18:54:35.833-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-10] Closing the Kafka producer with timeoutMillis = 0 ms.
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu reservo &amp#27;[0m&amp#27;[32m&amp#27;[1m-1&amp#27;[0m&amp#27;[32m unidades do produto &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.eu_reservo_unidades_do_produto_na_loja(java.lang.Integer,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mEntão &amp#27;[0m&amp#27;[32ma reserva deve falhar&amp#27;[0m                                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_reserva_deve_falhar()&amp#27;[0m
  &amp#27;[32mE &amp#27;[0m&amp#27;[32ma mensagem deve conter &amp#27;[0m&amp#27;[32m&amp#27;[1m"Quantidade deve ser maior que zero"&amp#27;[0m           &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_mensagem_deve_conter(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.833-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.833-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.833-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:35.833-03:00  INFO 87518 --- [store-service-test] [         task-2] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-10 unregistered
2025-09-01T18:54:35.833-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🔒 Limpeza após teste de reservas
2025-09-01T18:54:35.833-03:00  WARN 87518 --- [store-service-test] [         task-2] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.833-03:00 ERROR 87518 --- [store-service-test] [         task-2] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.834-03:00 ERROR 87518 --- [store-service-test] [         task-2] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=72c96b38-1afd-447a-931b-9a0214be74df, erro=Failed to construct kafka producer
2025-09-01T18:54:35.834-03:00 ERROR 87518 --- [store-service-test] [         task-2] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=72c96b38-1afd-447a-931b-9a0214be74df, erro=Falha definitiva na publicação do evento
2025-09-01T18:54:35.834-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.834-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.835-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:35.835-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Example #1.2" classname="Exemplos" time="0.019">
    <system-out><![CDATA[2025-09-01T18:54:35.983-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.984-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@cancelamento-reservas @cancelamento-quantidade-invalida
Esquema do Cenário: Tentar cancelar reserva com quantidade inválida                  &amp#27;[90m# features/reservation-cancellation.feature:44&amp#27;[0m
2025-09-01T18:54:35.987-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.988-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.989-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.989-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : ❌ Preparando teste de cancelamento
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                                        &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.989-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.990-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.990-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.990-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:35.990-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=4b648dc9-daf2-418f-90ac-2bf3a408411a
2025-09-01T18:54:35.990-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.991-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=4b648dc9-daf2-418f-90ac-2bf3a408411a
2025-09-01T18:54:35.991-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=4b648dc9-daf2-418f-90ac-2bf3a408411a, SKU=PROD-001
2025-09-01T18:54:35.991-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m              &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.992-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=80
2025-09-01T18:54:35.992-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.992-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.993-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=4b648dc9-daf2-418f-90ac-2bf3a408411a
2025-09-01T18:54:35.993-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=4b648dc9-daf2-418f-90ac-2bf3a408411a
2025-09-01T18:54:35.993-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=80
2025-09-01T18:54:35.993-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=a996f5d8-d4a0-4af6-b1ac-d1e13c64ef88, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:35.993-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m80&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.994-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.994-03:00 DEBUG 87518 --- [store-service-test] [         task-3] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=a996f5d8-d4a0-4af6-b1ac-d1e13c64ef88
DEBUG: Configurando 20 unidades reservadas para produto PROD-001
2025-09-01T18:54:35.994-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.994-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-19
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:35.995-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-19] Instantiated an idempotent producer.
2025-09-01T18:54:35.995-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.995-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-19] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:35.995-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.995-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.995-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:35.995-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-19 unregistered
2025-09-01T18:54:35.995-03:00  WARN 87518 --- [store-service-test] [         task-3] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.995-03:00 ERROR 87518 --- [store-service-test] [         task-3] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.995-03:00 ERROR 87518 --- [store-service-test] [         task-3] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=a996f5d8-d4a0-4af6-b1ac-d1e13c64ef88, erro=Failed to construct kafka producer
2025-09-01T18:54:35.995-03:00 ERROR 87518 --- [store-service-test] [         task-3] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=a996f5d8-d4a0-4af6-b1ac-d1e13c64ef88, erro=Falha definitiva na publicação do evento
2025-09-01T18:54:35.995-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=4b648dc9-daf2-418f-90ac-2bf3a408411a
2025-09-01T18:54:35.995-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.996-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
2025-09-01T18:54:35.997-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=4b648dc9-daf2-418f-90ac-2bf3a408411a
DEBUG: Produto salvo com reservas - Estoque: 80, Reservado: 20, Disponível: 80
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m20&amp#27;[0m&amp#27;[32m unidades reservadas&amp#27;[0m                                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.oProdutoTemUnidadesReservadas(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.997-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=4b648dc9-daf2-418f-90ac-2bf3a408411a
2025-09-01T18:54:35.997-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.998-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=4b648dc9-daf2-418f-90ac-2bf3a408411a
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:35.998-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.998-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.999-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.u.CancelReservationUseCase     : Executando cancelamento de reserva: SKU=PROD-001, Loja=STORE-001, Quantidade=-5
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu cancelo &amp#27;[0m&amp#27;[32m&amp#27;[1m-5&amp#27;[0m&amp#27;[32m unidades da reserva do produto &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.euCanceloUnidadesDaReservaDoProdutoNaLoja(java.lang.Integer,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mEntão &amp#27;[0m&amp#27;[32mo cancelamento deve falhar&amp#27;[0m                                                   &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.oCancelamentoDeveFalhar()&amp#27;[0m
  &amp#27;[32mE &amp#27;[0m&amp#27;[32ma mensagem deve conter &amp#27;[0m&amp#27;[32m&amp#27;[1m"Quantidade deve ser maior que zero"&amp#27;[0m                      &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_mensagem_deve_conter(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.999-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : ❌ Limpeza após teste de cancelamento
2025-09-01T18:54:36.000-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:36.000-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:36.001-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:36.001-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Example #1.3" classname="Exemplos" time="0.016">
    <system-out><![CDATA[2025-09-01T18:54:35.837-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.838-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@reservas @reserva-quantidade-invalida
Esquema do Cenário: Tentar reservar com quantidade inválida                &amp#27;[90m# features/product-reservation.feature:44&amp#27;[0m
2025-09-01T18:54:35.842-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.843-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.843-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.843-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🔒 Preparando teste de reservas
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                              &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.844-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.845-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.845-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.845-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:35.845-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=7f7d3740-a39f-469e-85fb-cf5fd9f37682
2025-09-01T18:54:35.845-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.846-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=7f7d3740-a39f-469e-85fb-cf5fd9f37682
2025-09-01T18:54:35.846-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=7f7d3740-a39f-469e-85fb-cf5fd9f37682, SKU=PROD-001
2025-09-01T18:54:35.846-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m    &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.847-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=50
2025-09-01T18:54:35.847-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.847-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.848-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=7f7d3740-a39f-469e-85fb-cf5fd9f37682
2025-09-01T18:54:35.848-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=7f7d3740-a39f-469e-85fb-cf5fd9f37682
2025-09-01T18:54:35.848-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=50
2025-09-01T18:54:35.848-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=ee24ad61-2a0c-4c66-a3e2-d032f521ad11, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:35.849-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m50&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                                   &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.849-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.849-03:00 DEBUG 87518 --- [store-service-test] [         task-3] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=ee24ad61-2a0c-4c66-a3e2-d032f521ad11
2025-09-01T18:54:35.849-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=7f7d3740-a39f-469e-85fb-cf5fd9f37682
2025-09-01T18:54:35.849-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-11
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:35.850-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.850-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-11] Instantiated an idempotent producer.
2025-09-01T18:54:35.850-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=7f7d3740-a39f-469e-85fb-cf5fd9f37682
2025-09-01T18:54:35.850-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-11] Closing the Kafka producer with timeoutMillis = 0 ms.
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                   &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:35.850-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.850-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.850-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.usecase.ReserveProductUseCase  : Executando reserva de produto: ReserveProductRequest{productSku='PROD-001', storeId='STORE-001', quantity=-10, customerId='TEST_CUSTOMER_123', reservationDuration='PT30M'} | customerId=TEST_CUSTOMER_123 | duration=PT30M
2025-09-01T18:54:35.850-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu reservo &amp#27;[0m&amp#27;[32m&amp#27;[1m-10&amp#27;[0m&amp#27;[32m unidades do produto &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.eu_reservo_unidades_do_produto_na_loja(java.lang.Integer,java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.850-03:00  INFO 87518 --- [store-service-test] [         task-3] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-11 unregistered
2025-09-01T18:54:35.850-03:00  WARN 87518 --- [store-service-test] [         task-3] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.850-03:00 ERROR 87518 --- [store-service-test] [         task-3] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.850-03:00 ERROR 87518 --- [store-service-test] [         task-3] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=ee24ad61-2a0c-4c66-a3e2-d032f521ad11, erro=Failed to construct kafka producer
  &amp#27;[32mEntão &amp#27;[0m&amp#27;[32ma reserva deve falhar&amp#27;[0m                                              &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_reserva_deve_falhar()&amp#27;[0m
2025-09-01T18:54:35.850-03:00 ERROR 87518 --- [store-service-test] [         task-3] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=ee24ad61-2a0c-4c66-a3e2-d032f521ad11, erro=Falha definitiva na publicação do evento
  &amp#27;[32mE &amp#27;[0m&amp#27;[32ma mensagem deve conter &amp#27;[0m&amp#27;[32m&amp#27;[1m"Quantidade deve ser maior que zero"&amp#27;[0m            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_mensagem_deve_conter(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.851-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🔒 Limpeza após teste de reservas
2025-09-01T18:54:35.851-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.851-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.852-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:35.852-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Cancelar reserva com sucesso" classname="Cancelamento de Reservas" time="0.036">
    <system-out><![CDATA[2025-09-01T18:54:35.880-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.881-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@cancelamento-reservas @cancelamento-sucesso
Cenário: Cancelar reserva com sucesso                                                &amp#27;[90m# features/reservation-cancellation.feature:16&amp#27;[0m
2025-09-01T18:54:35.887-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.888-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.888-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.889-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : ❌ Preparando teste de cancelamento
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                                        &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.889-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.890-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.891-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.891-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:35.891-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=650489ba-fd5b-4d02-a46e-3ef321399656
2025-09-01T18:54:35.891-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.892-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=650489ba-fd5b-4d02-a46e-3ef321399656
2025-09-01T18:54:35.892-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=650489ba-fd5b-4d02-a46e-3ef321399656, SKU=PROD-001
2025-09-01T18:54:35.892-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m              &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.893-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=80
2025-09-01T18:54:35.893-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.893-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.894-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=650489ba-fd5b-4d02-a46e-3ef321399656
2025-09-01T18:54:35.894-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=650489ba-fd5b-4d02-a46e-3ef321399656
2025-09-01T18:54:35.894-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=80
2025-09-01T18:54:35.894-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=aeea406e-f90e-47e0-b500-ceabc1dadc85, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:35.894-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m80&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.895-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.895-03:00 DEBUG 87518 --- [store-service-test] [         task-6] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=aeea406e-f90e-47e0-b500-ceabc1dadc85
2025-09-01T18:54:35.895-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-14
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:35.896-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-14] Instantiated an idempotent producer.
2025-09-01T18:54:35.896-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-14] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:35.896-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.896-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.896-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:35.896-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-14 unregistered
2025-09-01T18:54:35.896-03:00  WARN 87518 --- [store-service-test] [         task-6] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.896-03:00 ERROR 87518 --- [store-service-test] [         task-6] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.896-03:00 ERROR 87518 --- [store-service-test] [         task-6] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=aeea406e-f90e-47e0-b500-ceabc1dadc85, erro=Failed to construct kafka producer
2025-09-01T18:54:35.896-03:00 ERROR 87518 --- [store-service-test] [         task-6] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=aeea406e-f90e-47e0-b500-ceabc1dadc85, erro=Falha definitiva na publicação do evento
DEBUG: Configurando 20 unidades reservadas para produto PROD-001
2025-09-01T18:54:35.898-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.899-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.899-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=650489ba-fd5b-4d02-a46e-3ef321399656
2025-09-01T18:54:35.900-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.900-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
2025-09-01T18:54:35.901-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=650489ba-fd5b-4d02-a46e-3ef321399656
DEBUG: Produto salvo com reservas - Estoque: 80, Reservado: 20, Disponível: 80
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m20&amp#27;[0m&amp#27;[32m unidades reservadas&amp#27;[0m                                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.oProdutoTemUnidadesReservadas(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.901-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=650489ba-fd5b-4d02-a46e-3ef321399656
2025-09-01T18:54:35.902-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.902-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=650489ba-fd5b-4d02-a46e-3ef321399656
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:35.902-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.903-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.904-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.u.CancelReservationUseCase     : Executando cancelamento de reserva: SKU=PROD-001, Loja=STORE-001, Quantidade=10
2025-09-01T18:54:35.904-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Cancelando reserva: SKU=PROD-001, Loja=STORE-001, Quantidade=10
2025-09-01T18:54:35.904-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.905-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.905-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=650489ba-fd5b-4d02-a46e-3ef321399656
2025-09-01T18:54:35.906-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=650489ba-fd5b-4d02-a46e-3ef321399656
2025-09-01T18:54:35.906-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Reserva cancelada: SKU=PROD-001, Reservado=10
2025-09-01T18:54:35.906-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=136c2d72-e733-4500-962f-94cbf9e33379, tipo=CANCEL, produto=PROD-001
2025-09-01T18:54:35.906-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
2025-09-01T18:54:35.907-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.u.CancelReservationUseCase     : Reserva cancelada com sucesso: SKU=PROD-001, Quantidade reservada atual=10
2025-09-01T18:54:35.907-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.907-03:00 DEBUG 87518 --- [store-service-test] [         task-7] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=136c2d72-e733-4500-962f-94cbf9e33379
2025-09-01T18:54:35.907-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-15
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:35.907-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-15] Instantiated an idempotent producer.
2025-09-01T18:54:35.908-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-15] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:35.908-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.908-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.908-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:35.908-03:00  INFO 87518 --- [store-service-test] [         task-7] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-15 unregistered
2025-09-01T18:54:35.908-03:00  WARN 87518 --- [store-service-test] [         task-7] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.908-03:00 ERROR 87518 --- [store-service-test] [         task-7] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.908-03:00 ERROR 87518 --- [store-service-test] [         task-7] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=136c2d72-e733-4500-962f-94cbf9e33379, erro=Failed to construct kafka producer
2025-09-01T18:54:35.908-03:00 ERROR 87518 --- [store-service-test] [         task-7] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=136c2d72-e733-4500-962f-94cbf9e33379, erro=Falha definitiva na publicação do evento
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu cancelo &amp#27;[0m&amp#27;[32m&amp#27;[1m10&amp#27;[0m&amp#27;[32m unidades da reserva do produto &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.euCanceloUnidadesDaReservaDoProdutoNaLoja(java.lang.Integer,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mEntão &amp#27;[0m&amp#27;[32mo cancelamento deve ser bem-sucedido&amp#27;[0m                                         &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.oCancelamentoDeveSerBemSucedido()&amp#27;[0m
2025-09-01T18:54:35.910-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.911-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto deve ter &amp#27;[0m&amp#27;[32m&amp#27;[1m10&amp#27;[0m&amp#27;[32m unidades reservadas&amp#27;[0m                                        &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_deve_ter_unidades_reservadas(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.912-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.913-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto deve ter &amp#27;[0m&amp#27;[32m&amp#27;[1m90&amp#27;[0m&amp#27;[32m unidades disponíveis&amp#27;[0m                                       &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_deve_ter_unidades_disponíveis(java.lang.Integer)&amp#27;[0m
  &amp#27;[32mE &amp#27;[0m&amp#27;[32ma mensagem deve ser &amp#27;[0m&amp#27;[32m&amp#27;[1m"Reserva cancelada com sucesso"&amp#27;[0m                              &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_mensagem_deve_ser(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.914-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : ❌ Limpeza após teste de cancelamento
2025-09-01T18:54:35.914-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.914-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.915-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:35.915-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Tentar cancelar mais do que está reservado" classname="Cancelamento de Reservas" time="0.021">
    <system-out><![CDATA[2025-09-01T18:54:35.917-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.918-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@cancelamento-reservas @cancelamento-reserva-insuficiente
Cenário: Tentar cancelar mais do que está reservado                                  &amp#27;[90m# features/reservation-cancellation.feature:24&amp#27;[0m
2025-09-01T18:54:35.922-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.922-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.923-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.923-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : ❌ Preparando teste de cancelamento
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                                        &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.923-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.924-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.924-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.924-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:35.924-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=74e4cb75-4655-470e-a867-9baf00d8f3a0
2025-09-01T18:54:35.924-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.925-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=74e4cb75-4655-470e-a867-9baf00d8f3a0
2025-09-01T18:54:35.925-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=74e4cb75-4655-470e-a867-9baf00d8f3a0, SKU=PROD-001
2025-09-01T18:54:35.925-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m              &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.926-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=80
2025-09-01T18:54:35.926-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.927-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.927-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=74e4cb75-4655-470e-a867-9baf00d8f3a0
2025-09-01T18:54:35.927-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=74e4cb75-4655-470e-a867-9baf00d8f3a0
2025-09-01T18:54:35.927-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=80
2025-09-01T18:54:35.927-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=e63117c4-3f1f-422b-91c7-dc22060e58e5, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:35.928-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m80&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.928-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.928-03:00 DEBUG 87518 --- [store-service-test] [         task-8] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=e63117c4-3f1f-422b-91c7-dc22060e58e5
DEBUG: Configurando 20 unidades reservadas para produto PROD-001
2025-09-01T18:54:35.929-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.929-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-16
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:35.929-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-16] Instantiated an idempotent producer.
2025-09-01T18:54:35.929-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.930-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-16] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:35.930-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.930-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.930-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:35.930-03:00  INFO 87518 --- [store-service-test] [         task-8] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-16 unregistered
2025-09-01T18:54:35.930-03:00  WARN 87518 --- [store-service-test] [         task-8] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.930-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=74e4cb75-4655-470e-a867-9baf00d8f3a0
2025-09-01T18:54:35.930-03:00 ERROR 87518 --- [store-service-test] [         task-8] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.930-03:00 ERROR 87518 --- [store-service-test] [         task-8] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=e63117c4-3f1f-422b-91c7-dc22060e58e5, erro=Failed to construct kafka producer
2025-09-01T18:54:35.930-03:00 ERROR 87518 --- [store-service-test] [         task-8] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=e63117c4-3f1f-422b-91c7-dc22060e58e5, erro=Falha definitiva na publicação do evento
2025-09-01T18:54:35.930-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.931-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
2025-09-01T18:54:35.931-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=74e4cb75-4655-470e-a867-9baf00d8f3a0
DEBUG: Produto salvo com reservas - Estoque: 80, Reservado: 20, Disponível: 80
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m20&amp#27;[0m&amp#27;[32m unidades reservadas&amp#27;[0m                                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.oProdutoTemUnidadesReservadas(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.931-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=74e4cb75-4655-470e-a867-9baf00d8f3a0
2025-09-01T18:54:35.931-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.932-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=74e4cb75-4655-470e-a867-9baf00d8f3a0
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:35.932-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.933-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.933-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.u.CancelReservationUseCase     : Executando cancelamento de reserva: SKU=PROD-001, Loja=STORE-001, Quantidade=30
2025-09-01T18:54:35.933-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Cancelando reserva: SKU=PROD-001, Loja=STORE-001, Quantidade=30
2025-09-01T18:54:35.933-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.934-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.935-03:00  WARN 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.u.CancelReservationUseCase     : Falha ao cancelar reserva: Quantidade reservada insuficiente. Reservado: 20, Tentando cancelar: 30
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu cancelo &amp#27;[0m&amp#27;[32m&amp#27;[1m30&amp#27;[0m&amp#27;[32m unidades da reserva do produto &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.euCanceloUnidadesDaReservaDoProdutoNaLoja(java.lang.Integer,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mEntão &amp#27;[0m&amp#27;[32mo cancelamento deve falhar&amp#27;[0m                                                   &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.oCancelamentoDeveFalhar()&amp#27;[0m
  &amp#27;[32mE &amp#27;[0m&amp#27;[32ma mensagem deve conter &amp#27;[0m&amp#27;[32m&amp#27;[1m"Quantidade reservada insuficiente"&amp#27;[0m                       &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_mensagem_deve_conter(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.935-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : ❌ Limpeza após teste de cancelamento
2025-09-01T18:54:35.935-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.936-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.937-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:35.937-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Tentar cancelar reserva de produto que não existe" classname="Cancelamento de Reservas" time="0.022">
    <system-out><![CDATA[2025-09-01T18:54:35.939-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:35.940-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@cancelamento-reservas @cancelamento-produto-inexistente
Cenário: Tentar cancelar reserva de produto que não existe                          &amp#27;[90m# features/reservation-cancellation.feature:30&amp#27;[0m
2025-09-01T18:54:35.944-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:35.945-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.945-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:35.946-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : ❌ Preparando teste de cancelamento
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                                       &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.946-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.947-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.947-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.947-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:35.947-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=e28caa03-b63f-404e-bc90-dea59d387939
2025-09-01T18:54:35.948-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.948-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=e28caa03-b63f-404e-bc90-dea59d387939
2025-09-01T18:54:35.948-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=e28caa03-b63f-404e-bc90-dea59d387939, SKU=PROD-001
2025-09-01T18:54:35.948-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.949-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=80
2025-09-01T18:54:35.949-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.949-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.950-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=e28caa03-b63f-404e-bc90-dea59d387939
2025-09-01T18:54:35.950-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=e28caa03-b63f-404e-bc90-dea59d387939
2025-09-01T18:54:35.950-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=80
2025-09-01T18:54:35.950-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=7471d57d-0f04-43bf-9dcb-98e7b557bf9a, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:35.950-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m80&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.951-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:35.951-03:00 DEBUG 87518 --- [store-service-test] [         task-1] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=7471d57d-0f04-43bf-9dcb-98e7b557bf9a
DEBUG: Configurando 20 unidades reservadas para produto PROD-001
2025-09-01T18:54:35.951-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-17
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:35.951-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.952-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-17] Instantiated an idempotent producer.
2025-09-01T18:54:35.952-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-17] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:35.952-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.952-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:35.952-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:35.952-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:35.952-03:00  INFO 87518 --- [store-service-test] [         task-1] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-17 unregistered
2025-09-01T18:54:35.952-03:00  WARN 87518 --- [store-service-test] [         task-1] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.952-03:00 ERROR 87518 --- [store-service-test] [         task-1] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:35.952-03:00 ERROR 87518 --- [store-service-test] [         task-1] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=7471d57d-0f04-43bf-9dcb-98e7b557bf9a, erro=Failed to construct kafka producer
2025-09-01T18:54:35.952-03:00 ERROR 87518 --- [store-service-test] [         task-1] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=7471d57d-0f04-43bf-9dcb-98e7b557bf9a, erro=Falha definitiva na publicação do evento
2025-09-01T18:54:35.952-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=e28caa03-b63f-404e-bc90-dea59d387939
2025-09-01T18:54:35.953-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.954-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
2025-09-01T18:54:35.954-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=e28caa03-b63f-404e-bc90-dea59d387939
DEBUG: Produto salvo com reservas - Estoque: 80, Reservado: 20, Disponível: 80
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m20&amp#27;[0m&amp#27;[32m unidades reservadas&amp#27;[0m                                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.oProdutoTemUnidadesReservadas(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:35.954-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=e28caa03-b63f-404e-bc90-dea59d387939
2025-09-01T18:54:35.955-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:35.955-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=e28caa03-b63f-404e-bc90-dea59d387939
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:35.955-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:35.956-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.956-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.u.CancelReservationUseCase     : Executando cancelamento de reserva: SKU=PROD-999, Loja=STORE-001, Quantidade=5
2025-09-01T18:54:35.956-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Cancelando reserva: SKU=PROD-999, Loja=STORE-001, Quantidade=5
2025-09-01T18:54:35.956-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-999, Loja=STORE-001
2025-09-01T18:54:35.957-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:35.957-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-999, Loja=STORE-001
2025-09-01T18:54:35.957-03:00  WARN 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.u.CancelReservationUseCase     : Falha ao cancelar reserva: Produto não encontrado: SKU=PROD-999, Loja=STORE-001
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu cancelo &amp#27;[0m&amp#27;[32m&amp#27;[1m5&amp#27;[0m&amp#27;[32m unidades da reserva do produto &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-999"&amp#27;[0m&amp#27;[32m na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.euCanceloUnidadesDaReservaDoProdutoNaLoja(java.lang.Integer,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mEntão &amp#27;[0m&amp#27;[32mo cancelamento deve falhar&amp#27;[0m                                                  &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.oCancelamentoDeveFalhar()&amp#27;[0m
  &amp#27;[32mE &amp#27;[0m&amp#27;[32ma mensagem deve conter &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto não encontrado"&amp#27;[0m                                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_mensagem_deve_conter(java.lang.String)&amp#27;[0m
2025-09-01T18:54:35.958-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : ❌ Limpeza após teste de cancelamento
2025-09-01T18:54:35.958-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:35.958-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:35.960-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:35.960-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Tentar cancelar reserva em loja que não existe" classname="Cancelamento de Reservas" time="0.021">
    <system-out><![CDATA[2025-09-01T18:54:36.003-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:36.003-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@cancelamento-reservas @cancelamento-loja-inexistente
Cenário: Tentar cancelar reserva em loja que não existe                             &amp#27;[90m# features/reservation-cancellation.feature:47&amp#27;[0m
2025-09-01T18:54:36.007-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:36.008-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:36.008-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:36.008-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : ❌ Preparando teste de cancelamento
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                                       &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:36.009-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:36.009-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:36.009-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:36.010-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:36.010-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=41824838-8b9d-4f73-a88d-e0558dd23183
2025-09-01T18:54:36.010-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:36.010-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=41824838-8b9d-4f73-a88d-e0558dd23183
2025-09-01T18:54:36.010-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=41824838-8b9d-4f73-a88d-e0558dd23183, SKU=PROD-001
2025-09-01T18:54:36.010-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:36.011-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=80
2025-09-01T18:54:36.011-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:36.012-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:36.012-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=41824838-8b9d-4f73-a88d-e0558dd23183
2025-09-01T18:54:36.013-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=41824838-8b9d-4f73-a88d-e0558dd23183
2025-09-01T18:54:36.013-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=80
2025-09-01T18:54:36.013-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=212786dd-4b4d-430b-982e-981a4f43cad7, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:36.013-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m80&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:36.013-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:36.013-03:00 DEBUG 87518 --- [store-service-test] [         task-4] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=212786dd-4b4d-430b-982e-981a4f43cad7
DEBUG: Configurando 20 unidades reservadas para produto PROD-001
2025-09-01T18:54:36.014-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:36.014-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-20
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:36.014-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-20] Instantiated an idempotent producer.
2025-09-01T18:54:36.014-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-20] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:36.014-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:36.014-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:36.014-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:36.014-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:36.014-03:00  INFO 87518 --- [store-service-test] [         task-4] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-20 unregistered
2025-09-01T18:54:36.014-03:00  WARN 87518 --- [store-service-test] [         task-4] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:36.014-03:00 ERROR 87518 --- [store-service-test] [         task-4] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:36.014-03:00 ERROR 87518 --- [store-service-test] [         task-4] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=212786dd-4b4d-430b-982e-981a4f43cad7, erro=Failed to construct kafka producer
2025-09-01T18:54:36.015-03:00 ERROR 87518 --- [store-service-test] [         task-4] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=212786dd-4b4d-430b-982e-981a4f43cad7, erro=Falha definitiva na publicação do evento
2025-09-01T18:54:36.015-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=41824838-8b9d-4f73-a88d-e0558dd23183
2025-09-01T18:54:36.015-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:36.015-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
2025-09-01T18:54:36.016-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=41824838-8b9d-4f73-a88d-e0558dd23183
DEBUG: Produto salvo com reservas - Estoque: 80, Reservado: 20, Disponível: 80
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m20&amp#27;[0m&amp#27;[32m unidades reservadas&amp#27;[0m                                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.oProdutoTemUnidadesReservadas(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:36.016-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=41824838-8b9d-4f73-a88d-e0558dd23183
2025-09-01T18:54:36.016-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:36.016-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=41824838-8b9d-4f73-a88d-e0558dd23183
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                            &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:36.017-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:36.018-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:36.018-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.u.CancelReservationUseCase     : Executando cancelamento de reserva: SKU=PROD-001, Loja=STORE-999, Quantidade=5
2025-09-01T18:54:36.018-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Cancelando reserva: SKU=PROD-001, Loja=STORE-999, Quantidade=5
2025-09-01T18:54:36.018-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-999
2025-09-01T18:54:36.019-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:36.019-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-999
2025-09-01T18:54:36.019-03:00  WARN 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.u.CancelReservationUseCase     : Falha ao cancelar reserva: Produto não encontrado: SKU=PROD-001, Loja=STORE-999
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu cancelo &amp#27;[0m&amp#27;[32m&amp#27;[1m5&amp#27;[0m&amp#27;[32m unidades da reserva do produto &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-999"&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.euCanceloUnidadesDaReservaDoProdutoNaLoja(java.lang.Integer,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mEntão &amp#27;[0m&amp#27;[32mo cancelamento deve falhar&amp#27;[0m                                                  &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.oCancelamentoDeveFalhar()&amp#27;[0m
  &amp#27;[32mE &amp#27;[0m&amp#27;[32ma mensagem deve conter &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto não encontrado"&amp#27;[0m                                 &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.a_mensagem_deve_conter(java.lang.String)&amp#27;[0m
2025-09-01T18:54:36.020-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : ❌ Limpeza após teste de cancelamento
2025-09-01T18:54:36.020-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:36.020-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:36.021-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:36.022-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
  <testcase name="Cancelar toda a reserva do produto" classname="Cancelamento de Reservas" time="0.024">
    <system-out><![CDATA[2025-09-01T18:54:36.024-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.inventory.management.store.cucumber.CucumberSpringConfiguration]: CucumberSpringConfiguration does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-01T18:54:36.024-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.inventory.management.store.StoreServiceApplication for test class com.inventory.management.store.cucumber.CucumberSpringConfiguration

@cancelamento-reservas @cancelamento-reserva-total
Cenário: Cancelar toda a reserva do produto                                          &amp#27;[90m# features/reservation-cancellation.feature:53&amp#27;[0m
2025-09-01T18:54:36.028-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧪 Iniciando cenário de teste Cucumber
2025-09-01T18:54:36.029-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:36.029-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo antes do cenário
2025-09-01T18:54:36.030-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : ❌ Preparando teste de cancelamento
  &amp#27;[32mDado &amp#27;[0m&amp#27;[32mque existe uma loja com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m                                        &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.que_existe_uma_loja_com_id(java.lang.String)&amp#27;[0m
2025-09-01T18:54:36.030-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:36.030-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:36.031-03:00 ERROR 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto não encontrado: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:36.031-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Criando novo produto: SKU=PROD-001, Nome=Produto Teste, Loja=STORE-001
2025-09-01T18:54:36.031-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=c6456136-95f0-4279-9b02-57904e72e734
2025-09-01T18:54:36.031-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:36.032-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=c6456136-95f0-4279-9b02-57904e72e734
2025-09-01T18:54:36.032-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Produto criado com sucesso: ID=c6456136-95f0-4279-9b02-57904e72e734, SKU=PROD-001
2025-09-01T18:54:36.032-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : insert into store_service.products (active,description,updated_at,name,price,quantity,reserved_quantity,sku,store_id,id) values (?,?,?,?,?,?,?,?,?,?)
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mexiste um produto com SKU &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m e nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Produto Teste"&amp#27;[0m&amp#27;[32m na loja&amp#27;[0m              &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.existe_um_produto_com_sku_e_nome_na_loja(java.lang.String,java.lang.String)&amp#27;[0m
2025-09-01T18:54:36.033-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Atualizando quantidade: SKU=PROD-001, Loja=STORE-001, Nova quantidade=80
2025-09-01T18:54:36.033-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:36.034-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:36.034-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=c6456136-95f0-4279-9b02-57904e72e734
2025-09-01T18:54:36.034-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=c6456136-95f0-4279-9b02-57904e72e734
2025-09-01T18:54:36.034-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Quantidade atualizada: SKU=PROD-001, Quantidade anterior=50, Nova quantidade=80
2025-09-01T18:54:36.034-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=6c798928-0364-4c8f-98c5-2beb3b184a89, tipo=UPDATE, produto=PROD-001
2025-09-01T18:54:36.034-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
2025-09-01T18:54:36.035-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:36.035-03:00 DEBUG 87518 --- [store-service-test] [         task-5] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=6c798928-0364-4c8f-98c5-2beb3b184a89
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m80&amp#27;[0m&amp#27;[32m unidades em estoque&amp#27;[0m                                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_tem_unidades_em_estoque(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:36.035-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-21
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

DEBUG: Configurando 20 unidades reservadas para produto PROD-001
2025-09-01T18:54:36.035-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:36.036-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-21] Instantiated an idempotent producer.
2025-09-01T18:54:36.036-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-21] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:36.036-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:36.036-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:36.036-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:36.036-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:36.036-03:00  INFO 87518 --- [store-service-test] [         task-5] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-21 unregistered
2025-09-01T18:54:36.036-03:00  WARN 87518 --- [store-service-test] [         task-5] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:36.036-03:00 ERROR 87518 --- [store-service-test] [         task-5] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:36.036-03:00 ERROR 87518 --- [store-service-test] [         task-5] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=6c798928-0364-4c8f-98c5-2beb3b184a89, erro=Failed to construct kafka producer
2025-09-01T18:54:36.036-03:00 ERROR 87518 --- [store-service-test] [         task-5] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=6c798928-0364-4c8f-98c5-2beb3b184a89, erro=Falha definitiva na publicação do evento
2025-09-01T18:54:36.036-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=c6456136-95f0-4279-9b02-57904e72e734
2025-09-01T18:54:36.037-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:36.037-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
2025-09-01T18:54:36.038-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=c6456136-95f0-4279-9b02-57904e72e734
DEBUG: Produto salvo com reservas - Estoque: 80, Reservado: 20, Disponível: 80
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto tem &amp#27;[0m&amp#27;[32m&amp#27;[1m20&amp#27;[0m&amp#27;[32m unidades reservadas&amp#27;[0m                                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.oProdutoTemUnidadesReservadas(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:36.038-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=c6456136-95f0-4279-9b02-57904e72e734
2025-09-01T18:54:36.038-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.id=?
2025-09-01T18:54:36.039-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=c6456136-95f0-4279-9b02-57904e72e734
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto está ativo&amp#27;[0m                                                             &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_está_ativo()&amp#27;[0m
2025-09-01T18:54:36.039-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:36.039-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:36.040-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.u.CancelReservationUseCase     : Executando cancelamento de reserva: SKU=PROD-001, Loja=STORE-001, Quantidade=20
2025-09-01T18:54:36.040-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Cancelando reserva: SKU=PROD-001, Loja=STORE-001, Quantidade=20
2025-09-01T18:54:36.040-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:36.041-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:36.041-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Salvando produto: SKU=PROD-001, ID=c6456136-95f0-4279-9b02-57904e72e734
2025-09-01T18:54:36.041-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Produto salvo com sucesso: ID=c6456136-95f0-4279-9b02-57904e72e734
2025-09-01T18:54:36.041-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.d.s.InventoryDomainService       : Reserva cancelada: SKU=PROD-001, Reservado=0
2025-09-01T18:54:36.041-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 📤 Publicando evento de inventário: eventId=3f01dda3-cb5d-448d-b96d-2bd77cb1e469, tipo=CANCEL, produto=PROD-001
2025-09-01T18:54:36.041-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : update store_service.products set active=?,description=?,updated_at=?,name=?,price=?,quantity=?,reserved_quantity=?,sku=?,store_id=? where id=?
2025-09-01T18:54:36.042-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.a.u.CancelReservationUseCase     : Reserva cancelada com sucesso: SKU=PROD-001, Quantidade reservada atual=0
2025-09-01T18:54:36.042-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : 🔄 Iniciando retry para operação Kafka - tentativa: 1
2025-09-01T18:54:36.042-03:00 DEBUG 87518 --- [store-service-test] [         task-6] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : 🔄 Tentativa 1 de publicação: eventId=3f01dda3-cb5d-448d-b96d-2bd77cb1e469
  &amp#27;[32mQuando &amp#27;[0m&amp#27;[32meu cancelo &amp#27;[0m&amp#27;[32m&amp#27;[1m20&amp#27;[0m&amp#27;[32m unidades da reserva do produto &amp#27;[0m&amp#27;[32m&amp#27;[1m"PROD-001"&amp#27;[0m&amp#27;[32m na loja &amp#27;[0m&amp#27;[32m&amp#27;[1m"STORE-001"&amp#27;[0m &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.euCanceloUnidadesDaReservaDoProdutoNaLoja(java.lang.Integer,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mEntão &amp#27;[0m&amp#27;[32mo cancelamento deve ser bem-sucedido&amp#27;[0m                                         &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ReservationCancellationSteps.oCancelamentoDeveSerBemSucedido()&amp#27;[0m
2025-09-01T18:54:36.042-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = store-service-test-producer-22
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 1
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 3
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

2025-09-01T18:54:36.042-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:36.043-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-22] Instantiated an idempotent producer.
2025-09-01T18:54:36.043-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
2025-09-01T18:54:36.043-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.a.k.clients.producer.KafkaProducer     : [Producer clientId=store-service-test-producer-22] Closing the Kafka producer with timeoutMillis = 0 ms.
2025-09-01T18:54:36.043-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics scheduler closed
2025-09-01T18:54:36.043-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Closing reporter org.apache.kafka.common.metrics.JmxReporter
2025-09-01T18:54:36.043-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.apache.kafka.common.metrics.Metrics    : Metrics reporters closed
2025-09-01T18:54:36.043-03:00  INFO 87518 --- [store-service-test] [         task-6] [                                                 ] o.a.kafka.common.utils.AppInfoParser     : App info kafka.producer for store-service-test-producer-22 unregistered
2025-09-01T18:54:36.043-03:00  WARN 87518 --- [store-service-test] [         task-6] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ⚠️ Falha na tentativa 1 de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:36.043-03:00 ERROR 87518 --- [store-service-test] [         task-6] [                                                 ] c.i.m.s.i.config.ResilienceConfig        : ❌ Falha definitiva após 1 tentativas de operação Kafka: Failed to construct kafka producer
2025-09-01T18:54:36.043-03:00 ERROR 87518 --- [store-service-test] [         task-6] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação após retries: eventId=3f01dda3-cb5d-448d-b96d-2bd77cb1e469, erro=Failed to construct kafka producer
2025-09-01T18:54:36.043-03:00 ERROR 87518 --- [store-service-test] [         task-6] [                                                 ] m.s.i.a.o.m.KafkaInventoryEventPublisher : ❌ Falha na publicação assíncrona: eventId=3f01dda3-cb5d-448d-b96d-2bd77cb1e469, erro=Falha definitiva na publicação do evento
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto deve ter &amp#27;[0m&amp#27;[32m&amp#27;[1m0&amp#27;[0m&amp#27;[32m unidades reservadas&amp#27;[0m                                         &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_deve_ter_unidades_reservadas(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:36.043-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.s.i.a.o.p.ProductRepositoryAdapter : Buscando produto: SKU=PROD-001, Loja=STORE-001
2025-09-01T18:54:36.044-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0 where pe1_0.sku=? and pe1_0.store_id=?
  &amp#27;[32mE &amp#27;[0m&amp#27;[32mo produto deve ter &amp#27;[0m&amp#27;[32m&amp#27;[1m100&amp#27;[0m&amp#27;[32m unidades disponíveis&amp#27;[0m                                      &amp#27;[90m# com.inventory.management.store.cucumber.stepdefinitions.ProductReservationSteps.o_produto_deve_ter_unidades_disponíveis(java.lang.Integer)&amp#27;[0m
2025-09-01T18:54:36.045-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : ❌ Limpeza após teste de cancelamento
2025-09-01T18:54:36.045-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Finalizando cenário de teste Cucumber
2025-09-01T18:54:36.045-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : select pe1_0.id,pe1_0.active,pe1_0.description,pe1_0.updated_at,pe1_0.name,pe1_0.price,pe1_0.quantity,pe1_0.reserved_quantity,pe1_0.sku,pe1_0.store_id from store_service.products pe1_0
2025-09-01T18:54:36.046-03:00 DEBUG 87518 --- [store-service-test] [           main] [                                                 ] org.hibernate.SQL                        : delete from store_service.products where id=?
2025-09-01T18:54:36.046-03:00  INFO 87518 --- [store-service-test] [           main] [                                                 ] c.i.m.store.cucumber.hooks.TestHooks     : 🧹 Banco de dados limpo após o cenário
]]></system-out>
  </testcase>
</testsuite>