package com.inventory.management.store.infrastructure.adapter.out.messaging;

import com.inventory.management.store.domain.model.InventoryUpdateEvent;
import com.inventory.management.store.domain.port.InventoryEventPublisher;
import com.inventory.management.store.infrastructure.service.EventResilienceService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.retry.support.RetryTemplate;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;

import java.util.concurrent.CompletableFuture;

/**
 * Implementa√ß√£o resiliente do publisher de eventos usando Apache Kafka.
 * Respons√°vel por publicar eventos de atualiza√ß√£o de invent√°rio com estrat√©gias de retry e DLQ.
 * 
 * @author Sistema de Gerenciamento de Invent√°rio
 * @version 1.0.0
 * @since 1.0.0
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class KafkaInventoryEventPublisher implements InventoryEventPublisher {
    
    private final KafkaTemplate<String, String> kafkaTemplate;
    private final ObjectMapper objectMapper;
    private final EventResilienceService resilienceService;
    
    @Qualifier("kafkaRetryTemplate")
    private final RetryTemplate kafkaRetryTemplate;
    
    @Value("${app.kafka.topics.inventory-update:inventory-update}")
    private String inventoryUpdateTopic;
    
    @Value("${app.resilience.kafka.dlq.enabled:true}")
    private boolean dlqEnabled;
    
    /**
     * {@inheritDoc}
     */
    @Override
    public void publishInventoryUpdateEvent(InventoryUpdateEvent event) {
        log.info("üì§ Publicando evento de invent√°rio: eventId={}, tipo={}, produto={}", 
                event.getEventId(), event.getEventType(), event.getProductSku());
        
        try {
            String eventJson = serializeEvent(event);
            String partitionKey = buildPartitionKey(event);
            
            // Tentar publicar com retry autom√°tico
            publishWithResilience(event, eventJson, partitionKey);
            
        } catch (JsonProcessingException e) {
            log.error("‚ùå Erro na serializa√ß√£o do evento: eventId={}, erro={}", 
                    event.getEventId(), e.getMessage(), e);
            throw new EventPublishingException("Falha na serializa√ß√£o do evento", e);
        }
    }
    
    /**
     * Publica evento com estrat√©gia de resili√™ncia.
     */
    private void publishWithResilience(InventoryUpdateEvent event, String eventJson, String partitionKey) {
        try {
            // Tentar publicar com retry template
            kafkaRetryTemplate.execute(context -> {
                log.debug("üîÑ Tentativa {} de publica√ß√£o: eventId={}", 
                         context.getRetryCount() + 1, event.getEventId());
                
                CompletableFuture<SendResult<String, String>> future = 
                    kafkaTemplate.send(inventoryUpdateTopic, partitionKey, eventJson);
                
                // Aguardar resultado s√≠ncrono para capturar falhas imediatamente
                SendResult<String, String> result = future.get();
                
                log.info("‚úÖ Evento publicado com sucesso: eventId={}, offset={}, partition={}", 
                        event.getEventId(), 
                        result.getRecordMetadata().offset(),
                        result.getRecordMetadata().partition());
                
                return result;
            });
            
        } catch (Exception e) {
            log.error("‚ùå Falha na publica√ß√£o ap√≥s retries: eventId={}, erro={}", 
                    event.getEventId(), e.getMessage());
            
            // Salvar no DLQ se habilitado
            if (dlqEnabled) {
                try {
                    resilienceService.saveFailedEvent(
                        event.getEventId().toString(),
                        event.getEventType().toString(),
                        inventoryUpdateTopic,
                        partitionKey,
                        eventJson,
                        e.getMessage()
                    );
                    
                    log.info("üíæ Evento salvo no DLQ para retry posterior: eventId={}", event.getEventId());
                    
                    // N√£o lan√ßar exce√ß√£o - evento foi salvo para retry
                    return;
                    
                } catch (Exception dlqError) {
                    log.error("üíÄ Falha cr√≠tica: n√£o foi poss√≠vel salvar no DLQ: eventId={}, erro={}", 
                            event.getEventId(), dlqError.getMessage(), dlqError);
                }
            }
            
            // Se DLQ est√° desabilitado ou falhou, lan√ßar exce√ß√£o original
            throw new EventPublishingException("Falha definitiva na publica√ß√£o do evento", e);
        }
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    @Async
    public void publishInventoryUpdateEventAsync(InventoryUpdateEvent event) {
        try {
            publishInventoryUpdateEvent(event);
        } catch (EventPublishingException e) {
            // Para publica√ß√£o ass√≠ncrona, apenas logar erro
            // O evento j√° foi salvo no DLQ se poss√≠vel
            log.error("‚ùå Falha na publica√ß√£o ass√≠ncrona: eventId={}, erro={}", 
                    event.getEventId(), e.getMessage());
        }
    }
    
    /**
     * Serializa o evento para JSON.
     * 
     * @param event evento a ser serializado
     * @return JSON do evento
     * @throws JsonProcessingException se houver erro na serializa√ß√£o
     */
    private String serializeEvent(InventoryUpdateEvent event) throws JsonProcessingException {
        if (ObjectMapper.findModules().stream().noneMatch(JavaTimeModule.class::isInstance)) {
            objectMapper.registerModule(new JavaTimeModule());
        }
        return objectMapper.writeValueAsString(event);
    }
    
    /**
     * Constr√≥i a chave de parti√ß√£o baseada no SKU e loja.
     * Isso garante que eventos do mesmo produto sempre v√£o para a mesma parti√ß√£o,
     * mantendo a ordem dos eventos.
     * 
     * @param event evento
     * @return chave de parti√ß√£o
     */
    private String buildPartitionKey(InventoryUpdateEvent event) {
        return String.format("%s:%s", event.getStoreId(), event.getProductSku());
    }
}
